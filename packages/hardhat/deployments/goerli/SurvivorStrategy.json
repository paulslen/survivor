{
  "address": "0x1E595c0C832c1F564b737666ac76933C7dB16aFA",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_allo",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ALLOCATION_ACTIVE",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ALLOCATION_NOT_ACTIVE",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ALLOCATION_NOT_ENDED",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ALREADY_INITIALIZED",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AMOUNT_MISMATCH",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ANCHOR_ERROR",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ARRAY_MISMATCH",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "INVALID",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "INVALID_ADDRESS",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "INVALID_FEE",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "INVALID_METADATA",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "INVALID_REGISTRATION",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "IS_APPROVED_STRATEGY",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MAX_REACHED",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MISMATCH",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NONCE_NOT_AVAILABLE",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NOT_APPROVED_STRATEGY",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NOT_ENOUGH_FUNDS",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NOT_IMPLEMENTED",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NOT_INITIALIZED",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NOT_PENDING_OWNER",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "POOL_ACTIVE",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "POOL_INACTIVE",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RECIPIENT_ALREADY_ACCEPTED",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipientId",
          "type": "address"
        }
      ],
      "name": "RECIPIENT_ERROR",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RECIPIENT_NOT_ACCEPTED",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "REGISTRATION_ACTIVE",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "REGISTRATION_NOT_ACTIVE",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UNAUTHORIZED",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZERO_ADDRESS",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipientId",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "Allocated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        }
      ],
      "name": "AllocationTimeSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipientId",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipientAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "Distributed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "active",
          "type": "bool"
        }
      ],
      "name": "PoolActive",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipientId",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "Registered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipientId",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "votes",
          "type": "uint256"
        }
      ],
      "name": "Removed",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "NATIVE",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        }
      ],
      "name": "allocate",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "allocationsMade",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_recipientIds",
          "type": "address[]"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        }
      ],
      "name": "distribute",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "getActiveRecipient",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "recipientAddress",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "protocol",
                  "type": "uint256"
                },
                {
                  "internalType": "string",
                  "name": "pointer",
                  "type": "string"
                }
              ],
              "internalType": "struct Metadata",
              "name": "metadata",
              "type": "tuple"
            },
            {
              "internalType": "enum IStrategy.Status",
              "name": "recipientStatus",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "totalVotesReceived",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "earned",
              "type": "uint256"
            }
          ],
          "internalType": "struct SurvivorStrategy.Recipient",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getActiveRecipientCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllo",
      "outputs": [
        {
          "internalType": "contract IAllo",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_nftId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_roundNumber",
          "type": "uint256"
        }
      ],
      "name": "getAllocationsMade",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "getInactiveRecipient",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "recipientAddress",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "protocol",
                  "type": "uint256"
                },
                {
                  "internalType": "string",
                  "name": "pointer",
                  "type": "string"
                }
              ],
              "internalType": "struct Metadata",
              "name": "metadata",
              "type": "tuple"
            },
            {
              "internalType": "enum IStrategy.Status",
              "name": "recipientStatus",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "totalVotesReceived",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "earned",
              "type": "uint256"
            }
          ],
          "internalType": "struct SurvivorStrategy.Recipient",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getInactiveRecipientCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_recipientIds",
          "type": "address[]"
        },
        {
          "internalType": "bytes[]",
          "name": "_data",
          "type": "bytes[]"
        }
      ],
      "name": "getPayouts",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "recipientAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct IStrategy.PayoutSummary[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPoolAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPoolId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_recipientId",
          "type": "address"
        }
      ],
      "name": "getRecipient",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "recipientAddress",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "protocol",
                  "type": "uint256"
                },
                {
                  "internalType": "string",
                  "name": "pointer",
                  "type": "string"
                }
              ],
              "internalType": "struct Metadata",
              "name": "metadata",
              "type": "tuple"
            },
            {
              "internalType": "enum IStrategy.Status",
              "name": "recipientStatus",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "totalVotesReceived",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "earned",
              "type": "uint256"
            }
          ],
          "internalType": "struct SurvivorStrategy.Recipient",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_recipientId",
          "type": "address"
        }
      ],
      "name": "getRecipientStatus",
      "outputs": [
        {
          "internalType": "enum IStrategy.Status",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStrategyId",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "increasePoolAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_poolId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isPoolActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_allocator",
          "type": "address"
        }
      ],
      "name": "isValidAllocator",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxRecipientsAllowed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nft",
      "outputs": [
        {
          "internalType": "contract ERC721",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "recipients",
      "outputs": [
        {
          "internalType": "address",
          "name": "recipientAddress",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "protocol",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "pointer",
              "type": "string"
            }
          ],
          "internalType": "struct Metadata",
          "name": "metadata",
          "type": "tuple"
        },
        {
          "internalType": "enum IStrategy.Status",
          "name": "recipientStatus",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "totalVotesReceived",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "earned",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "recipientsCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        }
      ],
      "name": "registerRecipient",
      "outputs": [
        {
          "internalType": "address",
          "name": "recipientId",
          "type": "address"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "roundDuration",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "roundNumber",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "roundReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "roundStartTime",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalAllocations",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xbf8ef65f0e72061768e41b4cab2d59b3d27c9f2b94ce4515f289bbcae03a9abe",
  "receipt": {
    "to": null,
    "from": "0x6140f05E851cb312237C39D370a8d59964f0d4fA",
    "contractAddress": "0x1E595c0C832c1F564b737666ac76933C7dB16aFA",
    "transactionIndex": 11,
    "gasUsed": "2097295",
    "logsBloom": "0x
    "blockHash": "0x635c2565da9f86a85ef3372db72c3e809ee08fd9dd2781d2891920402d567f15",
    "transactionHash": "0xbf8ef65f0e72061768e41b4cab2d59b3d27c9f2b94ce4515f289bbcae03a9abe",
    "logs": [],
    "blockNumber": 10355775,
    "cumulativeGasUsed": "5349271",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xB087535DB0df98fC4327136e897A5985E5Cfbd66",
    "SurvivorStrategy"
  ],
  "numDeployments": 2,
  "solcInputHash": "f62f68f1048c78b4680d3c05899273fa",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_allo\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ALLOCATION_ACTIVE\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ALLOCATION_NOT_ACTIVE\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ALLOCATION_NOT_ENDED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ALREADY_INITIALIZED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AMOUNT_MISMATCH\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ANCHOR_ERROR\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ARRAY_MISMATCH\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"INVALID\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"INVALID_ADDRESS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"INVALID_FEE\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"INVALID_METADATA\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"INVALID_REGISTRATION\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IS_APPROVED_STRATEGY\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MAX_REACHED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MISMATCH\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NONCE_NOT_AVAILABLE\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NOT_APPROVED_STRATEGY\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NOT_ENOUGH_FUNDS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NOT_IMPLEMENTED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NOT_INITIALIZED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NOT_PENDING_OWNER\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"POOL_ACTIVE\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"POOL_INACTIVE\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RECIPIENT_ALREADY_ACCEPTED\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipientId\",\"type\":\"address\"}],\"name\":\"RECIPIENT_ERROR\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RECIPIENT_NOT_ACCEPTED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"REGISTRATION_ACTIVE\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"REGISTRATION_NOT_ACTIVE\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UNAUTHORIZED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZERO_ADDRESS\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipientId\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"Allocated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"AllocationTimeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipientId\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipientAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"Distributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"name\":\"PoolActive\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipientId\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"Registered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipientId\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"votes\",\"type\":\"uint256\"}],\"name\":\"Removed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"NATIVE\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"allocate\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allocationsMade\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_recipientIds\",\"type\":\"address[]\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"distribute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getActiveRecipient\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"recipientAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"protocol\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"pointer\",\"type\":\"string\"}],\"internalType\":\"struct Metadata\",\"name\":\"metadata\",\"type\":\"tuple\"},{\"internalType\":\"enum IStrategy.Status\",\"name\":\"recipientStatus\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"totalVotesReceived\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"earned\",\"type\":\"uint256\"}],\"internalType\":\"struct SurvivorStrategy.Recipient\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getActiveRecipientCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllo\",\"outputs\":[{\"internalType\":\"contract IAllo\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nftId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_roundNumber\",\"type\":\"uint256\"}],\"name\":\"getAllocationsMade\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getInactiveRecipient\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"recipientAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"protocol\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"pointer\",\"type\":\"string\"}],\"internalType\":\"struct Metadata\",\"name\":\"metadata\",\"type\":\"tuple\"},{\"internalType\":\"enum IStrategy.Status\",\"name\":\"recipientStatus\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"totalVotesReceived\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"earned\",\"type\":\"uint256\"}],\"internalType\":\"struct SurvivorStrategy.Recipient\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInactiveRecipientCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_recipientIds\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"_data\",\"type\":\"bytes[]\"}],\"name\":\"getPayouts\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"recipientAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IStrategy.PayoutSummary[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPoolAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPoolId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipientId\",\"type\":\"address\"}],\"name\":\"getRecipient\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"recipientAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"protocol\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"pointer\",\"type\":\"string\"}],\"internalType\":\"struct Metadata\",\"name\":\"metadata\",\"type\":\"tuple\"},{\"internalType\":\"enum IStrategy.Status\",\"name\":\"recipientStatus\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"totalVotesReceived\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"earned\",\"type\":\"uint256\"}],\"internalType\":\"struct SurvivorStrategy.Recipient\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipientId\",\"type\":\"address\"}],\"name\":\"getRecipientStatus\",\"outputs\":[{\"internalType\":\"enum IStrategy.Status\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStrategyId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"increasePoolAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPoolActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_allocator\",\"type\":\"address\"}],\"name\":\"isValidAllocator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxRecipientsAllowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nft\",\"outputs\":[{\"internalType\":\"contract ERC721\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"recipients\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"recipientAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"protocol\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"pointer\",\"type\":\"string\"}],\"internalType\":\"struct Metadata\",\"name\":\"metadata\",\"type\":\"tuple\"},{\"internalType\":\"enum IStrategy.Status\",\"name\":\"recipientStatus\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"totalVotesReceived\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"earned\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recipientsCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"registerRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"recipientId\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roundDuration\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roundNumber\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roundReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roundStartTime\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAllocations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"allo-team\",\"errors\":{\"ANCHOR_ERROR()\":[{\"details\":\"Thrown if the anchor creation fails\"}],\"NONCE_NOT_AVAILABLE()\":[{\"details\":\"Thrown when the nonce passed has been used or not available\"}],\"NOT_PENDING_OWNER()\":[{\"details\":\"Thrown when the 'msg.sender' is not the pending owner on ownership transfer\"}]},\"events\":{\"Allocated(address,uint256,address,address)\":{\"params\":{\"amount\":\"The amount allocated\",\"recipientId\":\"The ID of the recipient\",\"token\":\"The token allocated\"}},\"Distributed(address,address,uint256,address)\":{\"params\":{\"amount\":\"The amount distributed\",\"recipientAddress\":\"The recipient\",\"recipientId\":\"The ID of the recipient\",\"sender\":\"The sender\"}},\"Initialized(uint256,bytes)\":{\"params\":{\"data\":\"The data passed to the 'initialize' function\",\"poolId\":\"The ID of the pool\"}},\"PoolActive(bool)\":{\"params\":{\"active\":\"The status of the pool\"}},\"Registered(address,bytes,address)\":{\"params\":{\"data\":\"The data passed to the 'registerRecipient' function\",\"recipientId\":\"The ID of the recipient\",\"sender\":\"The sender\"}}},\"kind\":\"dev\",\"methods\":{\"allocate(bytes,address)\":{\"details\":\"The encoded '_data' will be determined by the strategy implementation. Only 'Allo' contract can      call this when it is initialized.\",\"params\":{\"_data\":\"The data to use to allocate to the recipient\",\"_sender\":\"The address of the sender\"}},\"distribute(address[],bytes,address)\":{\"details\":\"The encoded '_data' will be determined by the strategy implementation. Only 'Allo' contract can      call this when it is initialized.\",\"params\":{\"_data\":\"The data to use to distribute to the recipients\",\"_recipientIds\":\"The IDs of the recipients\",\"_sender\":\"The address of the sender\"}},\"getActiveRecipient(uint256)\":{\"params\":{\"_index\":\"The index of the recipient\"}},\"getActiveRecipientCount()\":{\"returns\":{\"_0\":\"The total number of recipients\"}},\"getAllo()\":{\"returns\":{\"_0\":\"The Allo contract\"}},\"getAllocationsMade(uint256,uint256)\":{\"params\":{\"_nftId\":\"The nft id\",\"_roundNumber\":\"The round number\"},\"returns\":{\"_0\":\"The number of votes\"}},\"getInactiveRecipientCount()\":{\"returns\":{\"_0\":\"The total number of recipients\"}},\"getPayouts(address[],bytes[])\":{\"details\":\"The encoded '_data' will be determined by the strategy implementation.\",\"params\":{\"_data\":\"The data to use to get the payout summary for the recipients\",\"_recipientIds\":\"The IDs of the recipients\"},\"returns\":{\"_0\":\"The payout summary for the recipients\"}},\"getPoolAmount()\":{\"returns\":{\"_0\":\"The balance of the pool\"}},\"getPoolId()\":{\"returns\":{\"_0\":\"The ID of the pool\"}},\"getRecipient(address)\":{\"params\":{\"_recipientId\":\"Id of the recipient\"}},\"getRecipientStatus(address)\":{\"params\":{\"_recipientId\":\"The ID of the recipient\"},\"returns\":{\"_0\":\"The status of the recipient\"}},\"getStrategyId()\":{\"returns\":{\"_0\":\"The ID of the strategy\"}},\"increasePoolAmount(uint256)\":{\"details\":\"Increases the 'poolAmount' by '_amount'. Only 'Allo' contract can call this.\",\"params\":{\"_amount\":\"The amount to increase the pool by\"}},\"isPoolActive()\":{\"returns\":{\"_0\":\"'true' if the pool is active, otherwise 'false'\"}},\"isValidAllocator(address)\":{\"details\":\"How the allocator is determined is up to the strategy implementation.\",\"params\":{\"_allocator\":\"The address to check if it is a valid allocator for the strategy.\"},\"returns\":{\"_0\":\"'true' if the address is a valid allocator, 'false' otherwise\"}},\"registerRecipient(bytes,address)\":{\"details\":\"Registers a recipient and returns the ID of the recipient. The encoded '_data' will be determined by the      strategy implementation. Only 'Allo' contract can call this when it is initialized.\",\"params\":{\"_data\":\"The data to use to register the recipient\",\"_sender\":\"The address of the sender\"},\"returns\":{\"recipientId\":\"The recipientId\"}}},\"title\":\"Proportional Payout Strategy\",\"version\":1},\"userdoc\":{\"errors\":{\"ALLOCATION_ACTIVE()\":[{\"notice\":\"Thrown when the allocation is active.\"}],\"ALLOCATION_NOT_ACTIVE()\":[{\"notice\":\"Thrown when the allocation is not active.\"}],\"ALLOCATION_NOT_ENDED()\":[{\"notice\":\"Thrown when the allocation is not ended.\"}],\"ALREADY_INITIALIZED()\":[{\"notice\":\"Thrown when data is already intialized\"}],\"AMOUNT_MISMATCH()\":[{\"notice\":\"Thrown when the amount of tokens sent does not match the amount of tokens expected\"}],\"ARRAY_MISMATCH()\":[{\"notice\":\"Thrown when two arrays length are not equal\"}],\"INVALID()\":[{\"notice\":\"Thrown as a general error when input / data is invalid\"}],\"INVALID_ADDRESS()\":[{\"notice\":\"Thrown when an invalid address is used\"}],\"INVALID_FEE()\":[{\"notice\":\"Thrown when the fee is below 1e18 which is the fee percentage denominator\"}],\"INVALID_METADATA()\":[{\"notice\":\"Thrown when the metadata is invalid.\"}],\"INVALID_REGISTRATION()\":[{\"notice\":\"Thrown when the registration is invalid.\"}],\"IS_APPROVED_STRATEGY()\":[{\"notice\":\"Thrown when the strategy is approved and should be cloned\"}],\"MAX_REACHED()\":[{\"notice\":\"===================== ======= Errors ====== =====================\"}],\"MISMATCH()\":[{\"notice\":\"Thrown when mismatch in decoding data\"}],\"NOT_APPROVED_STRATEGY()\":[{\"notice\":\"Thrown when the strategy is not approved\"}],\"NOT_ENOUGH_FUNDS()\":[{\"notice\":\"Thrown when not enough funds are available\"}],\"NOT_IMPLEMENTED()\":[{\"notice\":\"Thrown when the function is not implemented\"}],\"NOT_INITIALIZED()\":[{\"notice\":\"Thrown when data is yet to be initialized\"}],\"POOL_ACTIVE()\":[{\"notice\":\"Thrown when a pool is already active\"}],\"POOL_INACTIVE()\":[{\"notice\":\"Thrown when a pool is inactive\"}],\"RECIPIENT_ALREADY_ACCEPTED()\":[{\"notice\":\"Thrown when recipient is already accepted.\"}],\"RECIPIENT_ERROR(address)\":[{\"notice\":\"Thrown when there is an error in recipient.\"}],\"RECIPIENT_NOT_ACCEPTED()\":[{\"notice\":\"Thrown when the recipient is not accepted.\"}],\"REGISTRATION_ACTIVE()\":[{\"notice\":\"Thrown when registration is active.\"}],\"REGISTRATION_NOT_ACTIVE()\":[{\"notice\":\"Thrown when registration is not active.\"}],\"UNAUTHORIZED()\":[{\"notice\":\"Thrown when user is not authorized\"}],\"ZERO_ADDRESS()\":[{\"notice\":\"Thrown when address is the zero address\"}]},\"events\":{\"Allocated(address,uint256,address,address)\":{\"notice\":\"Emitted when a recipient is allocated to.\"},\"AllocationTimeSet(uint256,uint256)\":{\"notice\":\"===================== ======= Events ====== =====================\"},\"Distributed(address,address,uint256,address)\":{\"notice\":\"Emitted when tokens are distributed.\"},\"Initialized(uint256,bytes)\":{\"notice\":\"Emitted when strategy is initialized.\"},\"PoolActive(bool)\":{\"notice\":\"Emitted when pool is set to active status.\"},\"Registered(address,bytes,address)\":{\"notice\":\"Emitted when a recipient is registered.\"}},\"kind\":\"user\",\"methods\":{\"NATIVE()\":{\"notice\":\"Address of the native token\"},\"allocate(bytes,address)\":{\"notice\":\"Allocates to a recipient.\"},\"allocationsMade(uint256,uint256)\":{\"notice\":\"nftId => roundNumber => allocations made\"},\"distribute(address[],bytes,address)\":{\"notice\":\"Distributes funds (tokens) to recipients.\"},\"getActiveRecipient(uint256)\":{\"notice\":\"Get the recipient by their index in the active recipients list\"},\"getActiveRecipientCount()\":{\"notice\":\"Get the total number of active recipients\"},\"getAllo()\":{\"notice\":\"Getter for the 'Allo' contract.\"},\"getAllocationsMade(uint256,uint256)\":{\"notice\":\"Get the allocators votes for a round\"},\"getInactiveRecipientCount()\":{\"notice\":\"Get the total number of inactive recipients\"},\"getPayouts(address[],bytes[])\":{\"notice\":\"Gets the payout summary for recipients.\"},\"getPoolAmount()\":{\"notice\":\"Getter for the 'poolAmount'.\"},\"getPoolId()\":{\"notice\":\"Getter for the 'poolId'.\"},\"getRecipient(address)\":{\"notice\":\"Get the recipient\"},\"getRecipientStatus(address)\":{\"notice\":\"Getter for the status of a recipient.\"},\"getStrategyId()\":{\"notice\":\"Getter for the 'strategyId'.\"},\"increasePoolAmount(uint256)\":{\"notice\":\"Increases the pool amount.\"},\"initialize(uint256,bytes)\":{\"notice\":\"=============================== ========= Initialize ========== ===============================\"},\"isPoolActive()\":{\"notice\":\"Getter for whether or not the pool is active.\"},\"isValidAllocator(address)\":{\"notice\":\"Checks if the '_allocator' is a valid allocator.\"},\"maxRecipientsAllowed()\":{\"notice\":\"The maximum approved recipients\"},\"nft()\":{\"notice\":\"The NFT to give allocators\"},\"recipients(address)\":{\"notice\":\"recipientId => Recipient\"},\"recipientsCounter()\":{\"notice\":\"The total number of recipients\"},\"registerRecipient(bytes,address)\":{\"notice\":\"Registers a recipient.\"},\"roundDuration()\":{\"notice\":\"The duration of each allocation round\"},\"roundNumber()\":{\"notice\":\"The current round number (0 == first round)\"},\"roundReward()\":{\"notice\":\"The reward for the round\"},\"roundStartTime()\":{\"notice\":\"The start time of the first allocation round\"},\"totalAllocations()\":{\"notice\":\"The total number of votes cast by allocators\"}},\"notice\":\"This strategy allows the allocator to allocate votes to recipients\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SurvivorStrategy.sol\":\"SurvivorStrategy\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256, /* firstTokenId */\\n        uint256 batchSize\\n    ) internal virtual {\\n        if (batchSize > 1) {\\n            if (from != address(0)) {\\n                _balances[from] -= batchSize;\\n            }\\n            if (to != address(0)) {\\n                _balances[to] += batchSize;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xd89f3585b211fc9e3408384a4c4efdc3a93b2f877a3821046fa01c219d35be1b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xc3ff3f5c4584e1d9a483ad7ced51ab64523201f4e3d3c65293e4ca8aeb77a961\",\"license\":\"MIT\"},\"contracts/BaseStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.19;\\n\\n// Interfaces\\nimport \\\"../node_modules/allo-v2/contracts/core/interfaces/IStrategy.sol\\\";\\n\\n// Libraries\\nimport {Transfer} from \\\"../node_modules/allo-v2/contracts/core/libraries/Transfer.sol\\\";\\nimport {Errors} from \\\"../node_modules/allo-v2/contracts/core/libraries/Errors.sol\\\";\\n\\n// \\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2880\\u28fe\\u28ff\\u28f7\\u2840\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28fc\\u28ff\\u28ff\\u28f7\\u28c4\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u28d7\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u286f\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\n// \\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2880\\u28ff\\u28ff\\u28ff\\u28ff\\u28f7\\u2840\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28fc\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u2844\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u28d7\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u286f\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\n// \\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u2844\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28f8\\u28ff\\u28ff\\u28ff\\u28bf\\u28ff\\u28ff\\u28ff\\u2840\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u28d7\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u286f\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\n// \\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2818\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28c4\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28f0\\u28ff\\u28ff\\u28ff\\u285f\\u2818\\u28ff\\u28ff\\u28ff\\u28f7\\u2840\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u28d7\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u286f\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\n// \\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28c0\\u28f4\\u28fe\\u28ff\\u28ff\\u28ff\\u28ff\\u28fe\\u283b\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u2846\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28a0\\u28ff\\u28ff\\u28ff\\u287f\\u2800\\u2800\\u2838\\u28ff\\u28ff\\u28ff\\u28e7\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u28d7\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u286f\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2880\\u28e0\\u28f4\\u28f4\\u28f6\\u28f6\\u28f6\\u28e6\\u28e6\\u28c0\\u2840\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\n// \\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28f4\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u287f\\u2803\\u2800\\u2819\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28a0\\u28ff\\u28ff\\u28ff\\u28ff\\u2801\\u2800\\u2800\\u2800\\u28bb\\u28ff\\u28ff\\u28ff\\u28e7\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u28d7\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u286f\\u2800\\u2800\\u2800\\u2800\\u28e0\\u28fe\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28f6\\u2840\\u2800\\u2800\\u2800\\u2800\\n// \\u2800\\u2800\\u2800\\u2800\\u2800\\u2880\\u28fe\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u287f\\u2801\\u2800\\u2800\\u2800\\u2818\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u287f\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2880\\u28fe\\u28ff\\u28ff\\u28ff\\u2803\\u2800\\u2800\\u2800\\u2800\\u2808\\u28bf\\u28ff\\u28ff\\u28ff\\u28c6\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u28d7\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u286f\\u2800\\u2800\\u2800\\u28f0\\u28ff\\u28ff\\u28ff\\u287f\\u280b\\u2801\\u2800\\u2800\\u2808\\u2818\\u2839\\u28ff\\u28ff\\u28ff\\u28ff\\u28c6\\u2800\\u2800\\u2800\\n// \\u2800\\u2800\\u2800\\u2800\\u2880\\u28fe\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u287f\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2808\\u28bf\\u28ff\\u28ff\\u28ff\\u2803\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28fe\\u28ff\\u28ff\\u28ff\\u280f\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2818\\u28ff\\u28ff\\u28ff\\u28ff\\u2844\\u2800\\u2800\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u28d7\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u286f\\u2800\\u2800\\u28b0\\u28ff\\u28ff\\u28ff\\u28ff\\u2801\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2818\\u28ff\\u28ff\\u28ff\\u28ff\\u2840\\u2800\\u2800\\n// \\u2800\\u2800\\u2800\\u28a0\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28df\\u2800\\u2840\\u2880\\u2800\\u2840\\u2880\\u2800\\u2840\\u2888\\u28bf\\u285f\\u2801\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28fc\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u2844\\u2800\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u28d7\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u286f\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u28d7\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28ff\\u28ff\\u28ff\\u28ff\\u2847\\u2800\\u2800\\n// \\u2800\\u2800\\u28e0\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u287f\\u280b\\u28bb\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28f7\\u28f6\\u28c4\\u2840\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28f8\\u28ff\\u28ff\\u28ff\\u287f\\u28bf\\u283f\\u283f\\u283f\\u283f\\u283f\\u283f\\u283f\\u283f\\u283f\\u28bf\\u28ff\\u28ff\\u28ff\\u28f7\\u2840\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u28d7\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u286f\\u2800\\u2800\\u2838\\u28ff\\u28ff\\u28ff\\u28f7\\u2840\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28a0\\u28ff\\u28ff\\u28ff\\u28ff\\u2802\\u2800\\u2800\\n// \\u2800\\u2800\\u2819\\u281b\\u283f\\u283b\\u283b\\u281b\\u2809\\u2800\\u2800\\u2808\\u28bf\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28f7\\u28c4\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28f0\\u28ff\\u28ff\\u28ff\\u28ff\\u2801\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28bf\\u28ff\\u28ff\\u28ff\\u28e7\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u28d7\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u286f\\u2800\\u2800\\u2800\\u28bb\\u28ff\\u28ff\\u28ff\\u28f7\\u28c0\\u2880\\u2800\\u2800\\u2800\\u2840\\u28f0\\u28fe\\u28ff\\u28ff\\u28ff\\u280f\\u2800\\u2800\\u2800\\n// \\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2808\\u281b\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u2844\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28b0\\u28ff\\u28ff\\u28ff\\u28ff\\u2803\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2818\\u28ff\\u28ff\\u28ff\\u28ff\\u28e7\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u28d7\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u286f\\u2800\\u2800\\u2800\\u2800\\u2839\\u28bf\\u28ff\\u28ff\\u28ff\\u28ff\\u28fe\\u28fe\\u28f7\\u28ff\\u28ff\\u28ff\\u28ff\\u287f\\u280b\\u2800\\u2800\\u2800\\u2800\\n// \\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2808\\u2819\\u2819\\u280b\\u281b\\u2819\\u280b\\u281b\\u2819\\u280b\\u281b\\u2819\\u280b\\u2803\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2820\\u283f\\u283b\\u281f\\u283f\\u2803\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2838\\u281f\\u283f\\u281f\\u283f\\u2806\\u2800\\u2838\\u283f\\u283f\\u281f\\u282f\\u2800\\u2800\\u2800\\u2838\\u283f\\u283f\\u283f\\u280f\\u2800\\u2800\\u2800\\u2800\\u2800\\u2808\\u2809\\u283b\\u283b\\u287f\\u28ff\\u28bf\\u287f\\u287f\\u283f\\u281b\\u2801\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\n//                    allo.gitcoin.co\\n\\n/// @title BaseStrategy Contract\\n/// @author @thelostone-mc <aditya@gitcoin.co>, @0xKurt <kurt@gitcoin.co>, @codenamejason <jason@gitcoin.co>, @0xZakk <zakk@gitcoin.co>, @nfrgosselin <nate@gitcoin.co>\\n/// @notice This contract is the base contract for all strategies\\n/// @dev This contract is implemented by all strategies.\\nabstract contract BaseStrategy is IStrategy, Transfer, Errors {\\n    /// ==========================\\n    /// === Storage Variables ====\\n    /// ==========================\\n\\n    IAllo internal immutable allo;\\n    bytes32 internal immutable strategyId;\\n    bool internal poolActive;\\n    uint256 internal poolId;\\n    uint256 internal poolAmount;\\n\\n    /// ====================================\\n    /// ========== Constructor =============\\n    /// ====================================\\n\\n    /// @notice Constructor to set the Allo contract and \\\"strategyId'.\\n    /// @param _allo Address of the Allo contract.\\n    /// @param _name Name of the strategy\\n    constructor(address _allo, string memory _name) {\\n        allo = IAllo(_allo);\\n        strategyId = keccak256(abi.encode(_name));\\n    }\\n\\n    /// ====================================\\n    /// =========== Modifiers ==============\\n    /// ====================================\\n\\n    /// @notice Modifier to check if the 'msg.sender' is the Allo contract.\\n    /// @dev Reverts if the 'msg.sender' is not the Allo contract.\\n    modifier onlyAllo() {\\n        _checkOnlyAllo();\\n        _;\\n    }\\n\\n    /// @notice Modifier to check if the '_sender' is a pool manager.\\n    /// @dev Reverts if the '_sender' is not a pool manager.\\n    /// @param _sender The address to check if they are a pool manager\\n    modifier onlyPoolManager(address _sender) {\\n        _checkOnlyPoolManager(_sender);\\n        _;\\n    }\\n\\n    /// @notice Modifier to check if the pool is active.\\n    /// @dev Reverts if the pool is not active.\\n    modifier onlyActivePool() {\\n        _checkOnlyActivePool();\\n        _;\\n    }\\n\\n    /// @notice Modifier to check if the pool is inactive.\\n    /// @dev Reverts if the pool is active.\\n    modifier onlyInactivePool() {\\n        _checkInactivePool();\\n        _;\\n    }\\n\\n    /// @notice Modifier to check if the pool is initialized.\\n    /// @dev Reverts if the pool is not initialized.\\n    modifier onlyInitialized() {\\n        _checkOnlyInitialized();\\n        _;\\n    }\\n\\n    /// ================================\\n    /// =========== Views ==============\\n    /// ================================\\n\\n    /// @notice Getter for the 'Allo' contract.\\n    /// @return The Allo contract\\n    function getAllo() external view override returns (IAllo) {\\n        return allo;\\n    }\\n\\n    /// @notice Getter for the 'poolId'.\\n    /// @return The ID of the pool\\n    function getPoolId() external view override returns (uint256) {\\n        return poolId;\\n    }\\n\\n    /// @notice Getter for the 'strategyId'.\\n    /// @return The ID of the strategy\\n    function getStrategyId() external view override returns (bytes32) {\\n        return strategyId;\\n    }\\n\\n    /// @notice Getter for the 'poolAmount'.\\n    /// @return The balance of the pool\\n    function getPoolAmount() external view virtual override returns (uint256) {\\n        return poolAmount;\\n    }\\n\\n    /// @notice Getter for whether or not the pool is active.\\n    /// @return 'true' if the pool is active, otherwise 'false'\\n    function isPoolActive() external view override returns (bool) {\\n        return _isPoolActive();\\n    }\\n\\n    /// @notice Getter for the status of a recipient.\\n    /// @param _recipientId The ID of the recipient\\n    /// @return The status of the recipient\\n    function getRecipientStatus(address _recipientId) external view virtual returns (Status) {\\n        return _getRecipientStatus(_recipientId);\\n    }\\n\\n    /// ====================================\\n    /// =========== Functions ==============\\n    /// ====================================\\n\\n    /// @notice Initializes the 'Basetrategy'.\\n    /// @dev Will revert if the poolId is invalid or already initialized\\n    /// @param _poolId ID of the pool\\n    function __BaseStrategy_init(uint256 _poolId) internal virtual onlyAllo {\\n        // check if pool ID is not initialized already, if it is, revert\\n        if (poolId != 0) revert ALREADY_INITIALIZED();\\n\\n        // check if pool ID is valid and not zero (0), if it is, revert\\n        if (_poolId == 0) revert INVALID();\\n        poolId = _poolId;\\n    }\\n\\n    /// @notice Increases the pool amount.\\n    /// @dev Increases the 'poolAmount' by '_amount'. Only 'Allo' contract can call this.\\n    /// @param _amount The amount to increase the pool by\\n    function increasePoolAmount(uint256 _amount) external override onlyAllo {\\n        _beforeIncreasePoolAmount(_amount);\\n        poolAmount += _amount;\\n        _afterIncreasePoolAmount(_amount);\\n    }\\n\\n    /// @notice Registers a recipient.\\n    /// @dev Registers a recipient and returns the ID of the recipient. The encoded '_data' will be determined by the\\n    ///      strategy implementation. Only 'Allo' contract can call this when it is initialized.\\n    /// @param _data The data to use to register the recipient\\n    /// @param _sender The address of the sender\\n    /// @return recipientId The recipientId\\n    function registerRecipient(bytes memory _data, address _sender)\\n        external\\n        payable\\n        onlyAllo\\n        onlyInitialized\\n        returns (address recipientId)\\n    {\\n        _beforeRegisterRecipient(_data, _sender);\\n        recipientId = _registerRecipient(_data, _sender);\\n        _afterRegisterRecipient(_data, _sender);\\n    }\\n\\n    /// @notice Allocates to a recipient.\\n    /// @dev The encoded '_data' will be determined by the strategy implementation. Only 'Allo' contract can\\n    ///      call this when it is initialized.\\n    /// @param _data The data to use to allocate to the recipient\\n    /// @param _sender The address of the sender\\n    function allocate(bytes memory _data, address _sender) external payable onlyAllo onlyInitialized {\\n        _beforeAllocate(_data, _sender);\\n        _allocate(_data, _sender);\\n        _afterAllocate(_data, _sender);\\n    }\\n\\n    /// @notice Distributes funds (tokens) to recipients.\\n    /// @dev The encoded '_data' will be determined by the strategy implementation. Only 'Allo' contract can\\n    ///      call this when it is initialized.\\n    /// @param _recipientIds The IDs of the recipients\\n    /// @param _data The data to use to distribute to the recipients\\n    /// @param _sender The address of the sender\\n    function distribute(address[] memory _recipientIds, bytes memory _data, address _sender)\\n        external\\n        onlyAllo\\n        onlyInitialized\\n    {\\n        _beforeDistribute(_recipientIds, _data, _sender);\\n        _distribute(_recipientIds, _data, _sender);\\n        _afterDistribute(_recipientIds, _data, _sender);\\n    }\\n\\n    /// @notice Gets the payout summary for recipients.\\n    /// @dev The encoded '_data' will be determined by the strategy implementation.\\n    /// @param _recipientIds The IDs of the recipients\\n    /// @param _data The data to use to get the payout summary for the recipients\\n    /// @return The payout summary for the recipients\\n    function getPayouts(address[] memory _recipientIds, bytes[] memory _data)\\n        external\\n        view\\n        virtual\\n        override\\n        returns (PayoutSummary[] memory)\\n    {\\n        uint256 recipientLength = _recipientIds.length;\\n        // check if the length of the recipient IDs and data arrays are equal, if they are not, revert\\n        if (recipientLength != _data.length) revert ARRAY_MISMATCH();\\n\\n        PayoutSummary[] memory payouts = new PayoutSummary[](recipientLength);\\n        for (uint256 i; i < recipientLength;) {\\n            payouts[i] = _getPayout(_recipientIds[i], _data[i]);\\n            unchecked {\\n                i++;\\n            }\\n        }\\n        return payouts;\\n    }\\n\\n    /// @notice Checks if the '_allocator' is a valid allocator.\\n    /// @dev How the allocator is determined is up to the strategy implementation.\\n    /// @param _allocator The address to check if it is a valid allocator for the strategy.\\n    /// @return 'true' if the address is a valid allocator, 'false' otherwise\\n    function isValidAllocator(address _allocator) external view virtual override returns (bool) {\\n        return _isValidAllocator(_allocator);\\n    }\\n\\n    /// ====================================\\n    /// ============ Internal ==============\\n    /// ====================================\\n\\n    /// @notice Checks if the 'msg.sender' is the Allo contract.\\n    /// @dev Reverts if the 'msg.sender' is not the Allo contract.\\n    function _checkOnlyAllo() internal view {\\n        if (msg.sender != address(allo)) revert UNAUTHORIZED();\\n    }\\n\\n    /// @notice Checks if the '_sender' is a pool manager.\\n    /// @dev Reverts if the '_sender' is not a pool manager.\\n    /// @param _sender The address to check if they are a pool manager\\n    function _checkOnlyPoolManager(address _sender) internal view {\\n        if (!allo.isPoolManager(poolId, _sender)) revert UNAUTHORIZED();\\n    }\\n\\n    /// @notice Checks if the pool is active.\\n    /// @dev Reverts if the pool is not active.\\n    function _checkOnlyActivePool() internal view {\\n        if (!poolActive) revert POOL_INACTIVE();\\n    }\\n\\n    /// @notice Checks if the pool is inactive.\\n    /// @dev Reverts if the pool is active.\\n    function _checkInactivePool() internal view {\\n        if (poolActive) revert POOL_ACTIVE();\\n    }\\n\\n    /// @notice Checks if the pool is initialized.\\n    /// @dev Reverts if the pool is not initialized.\\n    function _checkOnlyInitialized() internal view {\\n        if (poolId == 0) revert NOT_INITIALIZED();\\n    }\\n\\n    /// @notice Set the pool to active or inactive status.\\n    /// @dev This will emit a 'PoolActive()' event. Used by the strategy implementation.\\n    /// @param _active The status to set, 'true' means active, 'false' means inactive\\n    function _setPoolActive(bool _active) internal {\\n        poolActive = _active;\\n        emit PoolActive(_active);\\n    }\\n\\n    /// @notice Checks if the pool is active.\\n    /// @dev Used by the strategy implementation.\\n    /// @return 'true' if the pool is active, otherwise 'false'\\n    function _isPoolActive() internal view virtual returns (bool) {\\n        return poolActive;\\n    }\\n\\n    /// @notice Checks if the allocator is valid\\n    /// @param _allocator The allocator address\\n    /// @return 'true' if the allocator is valid, otherwise 'false'\\n    function _isValidAllocator(address _allocator) internal view virtual returns (bool);\\n\\n    /// @notice This will register a recipient, set their status (and any other strategy specific values), and\\n    ///         return the ID of the recipient.\\n    /// @dev Able to change status all the way up to Accepted, or to Pending and if there are more steps, additional\\n    ///      functions should be added to allow the owner to check this. The owner could also check attestations directly\\n    ///      and then Accept for instance.\\n    /// @param _data The data to use to register the recipient\\n    /// @param _sender The address of the sender\\n    /// @return The ID of the recipient\\n    function _registerRecipient(bytes memory _data, address _sender) internal virtual returns (address);\\n\\n    /// @notice This will allocate to a recipient.\\n    /// @dev The encoded '_data' will be determined by the strategy implementation.\\n    /// @param _data The data to use to allocate to the recipient\\n    /// @param _sender The address of the sender\\n    function _allocate(bytes memory _data, address _sender) internal virtual;\\n\\n    /// @notice This will distribute funds (tokens) to recipients.\\n    /// @dev most strategies will track a TOTAL amount per recipient, and a PAID amount, and pay the difference\\n    /// this contract will need to track the amount paid already, so that it doesn't double pay.\\n    /// @param _recipientIds The ids of the recipients to distribute to\\n    /// @param _data Data required will depend on the strategy implementation\\n    /// @param _sender The address of the sender\\n    function _distribute(address[] memory _recipientIds, bytes memory _data, address _sender) internal virtual;\\n\\n    /// @notice This will get the payout summary for a recipient.\\n    /// @dev The encoded '_data' will be determined by the strategy implementation.\\n    /// @param _recipientId The ID of the recipient\\n    /// @param _data The data to use to get the payout summary for the recipient\\n    /// @return The payout summary for the recipient\\n    function _getPayout(address _recipientId, bytes memory _data)\\n        internal\\n        view\\n        virtual\\n        returns (PayoutSummary memory);\\n\\n    /// @notice This will get the status of a recipient.\\n    /// @param _recipientId The ID of the recipient\\n    /// @return The status of the recipient\\n    function _getRecipientStatus(address _recipientId) internal view virtual returns (Status);\\n\\n    /// ===================================\\n    /// ============== Hooks ==============\\n    /// ===================================\\n\\n    /// @notice Hook called before increasing the pool amount.\\n    /// @param _amount The amount to increase the pool by\\n    function _beforeIncreasePoolAmount(uint256 _amount) internal virtual {}\\n\\n    /// @notice Hook called after increasing the pool amount.\\n    /// @param _amount The amount to increase the pool by\\n    function _afterIncreasePoolAmount(uint256 _amount) internal virtual {}\\n\\n    /// @notice Hook called before registering a recipient.\\n    /// @param _data The data to use to register the recipient\\n    /// @param _sender The address of the sender\\n    function _beforeRegisterRecipient(bytes memory _data, address _sender) internal virtual {}\\n\\n    /// @notice Hook called after registering a recipient.\\n    /// @param _data The data to use to register the recipient\\n    /// @param _sender The address of the sender\\n    function _afterRegisterRecipient(bytes memory _data, address _sender) internal virtual {}\\n\\n    /// @notice Hook called before allocating to a recipient.\\n    /// @param _data The data to use to allocate to the recipient\\n    /// @param _sender The address of the sender\\n    function _beforeAllocate(bytes memory _data, address _sender) internal virtual {}\\n\\n    /// @notice Hook called after allocating to a recipient.\\n    /// @param _data The data to use to allocate to the recipient\\n    /// @param _sender The address of the sender\\n    function _afterAllocate(bytes memory _data, address _sender) internal virtual {}\\n\\n    /// @notice Hook called before distributing funds (tokens) to recipients.\\n    /// @param _recipientIds The IDs of the recipients\\n    /// @param _data The data to use to distribute to the recipients\\n    /// @param _sender The address of the sender\\n    function _beforeDistribute(address[] memory _recipientIds, bytes memory _data, address _sender) internal virtual {}\\n\\n    /// @notice Hook called after distributing funds (tokens) to recipients.\\n    /// @param _recipientIds The IDs of the recipients\\n    /// @param _data The data to use to distribute to the recipients\\n    /// @param _sender The address of the sender\\n    function _afterDistribute(address[] memory _recipientIds, bytes memory _data, address _sender) internal virtual {}\\n}\\n\",\"keccak256\":\"0x98dc59ac52879aa0f3d2d9a2cce306bcaeab92dacd96bd83799e007e9dac6ed0\",\"license\":\"AGPL-3.0-only\"},\"contracts/SurvivorStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.19;\\n\\nimport {ERC721} from \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport {IAllo} from \\\"../node_modules/allo-v2/contracts/core/interfaces/IAllo.sol\\\";\\nimport {BaseStrategy} from \\\"./BaseStrategy.sol\\\";\\nimport {Metadata} from \\\"../node_modules/allo-v2/contracts/core/libraries/Metadata.sol\\\";\\nimport {EnumerableSet} from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n// import \\\"forge-std/console.sol\\\";\\n\\n// \\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2880\\u28fe\\u28ff\\u28f7\\u2840\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28fc\\u28ff\\u28ff\\u28f7\\u28c4\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u28d7\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u286f\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\n// \\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2880\\u28ff\\u28ff\\u28ff\\u28ff\\u28f7\\u2840\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28fc\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u2844\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u28d7\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u286f\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\n// \\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u2844\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28f8\\u28ff\\u28ff\\u28ff\\u28bf\\u28ff\\u28ff\\u28ff\\u2840\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u28d7\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u286f\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\n// \\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2818\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28c4\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28f0\\u28ff\\u28ff\\u28ff\\u285f\\u2818\\u28ff\\u28ff\\u28ff\\u28f7\\u2840\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u28d7\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u286f\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\n// \\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28c0\\u28f4\\u28fe\\u28ff\\u28ff\\u28ff\\u28ff\\u28fe\\u283b\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u2846\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28a0\\u28ff\\u28ff\\u28ff\\u287f\\u2800\\u2800\\u2838\\u28ff\\u28ff\\u28ff\\u28e7\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u28d7\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u286f\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2880\\u28e0\\u28f4\\u28f4\\u28f6\\u28f6\\u28f6\\u28e6\\u28e6\\u28c0\\u2840\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\n// \\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28f4\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u287f\\u2803\\u2800\\u2819\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28a0\\u28ff\\u28ff\\u28ff\\u28ff\\u2801\\u2800\\u2800\\u2800\\u28bb\\u28ff\\u28ff\\u28ff\\u28e7\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u28d7\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u286f\\u2800\\u2800\\u2800\\u2800\\u28e0\\u28fe\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28f6\\u2840\\u2800\\u2800\\u2800\\u2800\\n// \\u2800\\u2800\\u2800\\u2800\\u2800\\u2880\\u28fe\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u287f\\u2801\\u2800\\u2800\\u2800\\u2818\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u287f\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2880\\u28fe\\u28ff\\u28ff\\u28ff\\u2803\\u2800\\u2800\\u2800\\u2800\\u2808\\u28bf\\u28ff\\u28ff\\u28ff\\u28c6\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u28d7\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u286f\\u2800\\u2800\\u2800\\u28f0\\u28ff\\u28ff\\u28ff\\u287f\\u280b\\u2801\\u2800\\u2800\\u2808\\u2818\\u2839\\u28ff\\u28ff\\u28ff\\u28ff\\u28c6\\u2800\\u2800\\u2800\\n// \\u2800\\u2800\\u2800\\u2800\\u2880\\u28fe\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u287f\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2808\\u28bf\\u28ff\\u28ff\\u28ff\\u2803\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28fe\\u28ff\\u28ff\\u28ff\\u280f\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2818\\u28ff\\u28ff\\u28ff\\u28ff\\u2844\\u2800\\u2800\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u28d7\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u286f\\u2800\\u2800\\u28b0\\u28ff\\u28ff\\u28ff\\u28ff\\u2801\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2818\\u28ff\\u28ff\\u28ff\\u28ff\\u2840\\u2800\\u2800\\n// \\u2800\\u2800\\u2800\\u28a0\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28df\\u2800\\u2840\\u2880\\u2800\\u2840\\u2880\\u2800\\u2840\\u2888\\u28bf\\u285f\\u2801\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28fc\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u2844\\u2800\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u28d7\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u286f\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u28d7\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28ff\\u28ff\\u28ff\\u28ff\\u2847\\u2800\\u2800\\n// \\u2800\\u2800\\u28e0\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u287f\\u280b\\u28bb\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28f7\\u28f6\\u28c4\\u2840\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28f8\\u28ff\\u28ff\\u28ff\\u287f\\u28bf\\u283f\\u283f\\u283f\\u283f\\u283f\\u283f\\u283f\\u283f\\u283f\\u28bf\\u28ff\\u28ff\\u28ff\\u28f7\\u2840\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u28d7\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u286f\\u2800\\u2800\\u2838\\u28ff\\u28ff\\u28ff\\u28f7\\u2840\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28a0\\u28ff\\u28ff\\u28ff\\u28ff\\u2802\\u2800\\u2800\\n// \\u2800\\u2800\\u2819\\u281b\\u283f\\u283b\\u283b\\u281b\\u2809\\u2800\\u2800\\u2808\\u28bf\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28f7\\u28c4\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28f0\\u28ff\\u28ff\\u28ff\\u28ff\\u2801\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28bf\\u28ff\\u28ff\\u28ff\\u28e7\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u28d7\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u286f\\u2800\\u2800\\u2800\\u28bb\\u28ff\\u28ff\\u28ff\\u28f7\\u28c0\\u2880\\u2800\\u2800\\u2800\\u2840\\u28f0\\u28fe\\u28ff\\u28ff\\u28ff\\u280f\\u2800\\u2800\\u2800\\n// \\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2808\\u281b\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u2844\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28b0\\u28ff\\u28ff\\u28ff\\u28ff\\u2803\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2818\\u28ff\\u28ff\\u28ff\\u28ff\\u28e7\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u28d7\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u286f\\u2800\\u2800\\u2800\\u2800\\u2839\\u28bf\\u28ff\\u28ff\\u28ff\\u28ff\\u28fe\\u28fe\\u28f7\\u28ff\\u28ff\\u28ff\\u28ff\\u287f\\u280b\\u2800\\u2800\\u2800\\u2800\\n// \\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2808\\u2819\\u2819\\u280b\\u281b\\u2819\\u280b\\u281b\\u2819\\u280b\\u281b\\u2819\\u280b\\u2803\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2820\\u283f\\u283b\\u281f\\u283f\\u2803\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2838\\u281f\\u283f\\u281f\\u283f\\u2806\\u2800\\u2838\\u283f\\u283f\\u281f\\u282f\\u2800\\u2800\\u2800\\u2838\\u283f\\u283f\\u283f\\u280f\\u2800\\u2800\\u2800\\u2800\\u2800\\u2808\\u2809\\u283b\\u283b\\u287f\\u28ff\\u28bf\\u287f\\u287f\\u283f\\u281b\\u2801\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\n//                    allo.gitcoin.co\\n\\n/// @title Proportional Payout Strategy\\n/// @notice This strategy allows the allocator to allocate votes to recipients\\n/// @author allo-team\\ncontract SurvivorStrategy is BaseStrategy {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    /// =====================\\n    /// ======= Events ======\\n    /// =====================\\n\\n    event AllocationTimeSet(uint256 startTime, uint256 endTime);\\n    event Removed(address recipientId, uint256 votes);\\n\\n    /// =====================\\n    /// ======= Errors ======\\n    /// =====================\\n\\n    error MAX_REACHED();\\n\\n    /// ======================\\n    /// ====== Modifier ======\\n    /// ======================\\n\\n    /// @notice Modifier to check if the allocation is active\\n    /// @dev Reverts if the allocation is not active\\n    modifier onlyActiveAllocation() {\\n        _checkOnlyActiveAllocation();\\n        _;\\n    }\\n\\n    /// @notice Modifier to check if the allocation has ended\\n    /// @dev Reverts if the allocation has not ended\\n    modifier onlyAfterAllocation() {\\n        _checkOnlyAfterAllocation();\\n        _;\\n    }\\n\\n    /// =======================\\n    /// ======= Storage =======\\n    /// =======================\\n\\n    struct Recipient {\\n        address recipientAddress;\\n        Metadata metadata;\\n        Status recipientStatus;\\n        /// @notice The total number of votes received across all rounds\\n        uint256 totalVotesReceived;\\n        /// @notice The total amount earned across all rounds\\n        uint256 earned;\\n    }\\n\\n    /// @notice The data used to initialize the strategy\\n    struct InitializeData {\\n        /// @notice The address of the NFT to give allocators\\n        address nft;\\n        /// @notice The maximum approved recipients\\n        uint256 maxRecipientsAllowed;\\n        /// @notice The start time of the first allocation round\\n        uint64 roundStartTime;\\n        /// @notice The duration of each allocation round\\n        uint64 roundDuration;\\n        /// @notice The per round reward amount\\n        uint256 roundReward;\\n    }\\n\\n    /// @notice recipientId => Recipient\\n    mapping(address => Recipient) public recipients;\\n    /// @notice List of active recipients\\n    EnumerableSet.AddressSet private activeRecipients;\\n    /// @notice List of inactive recipients\\n    EnumerableSet.AddressSet private inactiveRecipients;\\n    /// @notice nftId => roundNumber => allocations made\\n    mapping(uint256 => mapping(uint256 => uint256)) public allocationsMade;\\n\\n    /// @notice The NFT to give allocators\\n    ERC721 public nft;\\n\\n    /// @notice The maximum approved recipients\\n    uint256 public maxRecipientsAllowed;\\n\\n    /// @notice The total number of recipients\\n    uint256 public recipientsCounter;\\n\\n    /// @notice The total number of votes cast by allocators\\n    uint256 public totalAllocations;\\n\\n    /// @notice The reward for the round\\n    uint256 public roundReward;\\n\\n    /// @notice The start time of the first allocation round\\n    uint64 public roundStartTime;\\n\\n    /// @notice The duration of each allocation round\\n    uint64 public roundDuration;\\n\\n    /// @notice The current round number (0 == first round)\\n    uint64 public roundNumber;\\n\\n    // ===================\\n    // === Constructor ===\\n    // ===================\\n\\n    constructor(address _allo, string memory _name) BaseStrategy(_allo, _name) {}\\n\\n    /// ===============================\\n    /// ========= Initialize ==========\\n    /// ===============================\\n\\n    function initialize(uint256 _poolId, bytes memory _data) external override onlyAllo {\\n        InitializeData memory initializeData = abi.decode(_data, (InitializeData));\\n        __SurvivorStrategy_init(_poolId, initializeData);\\n        emit Initialized(_poolId, _data);\\n    }\\n\\n    function __SurvivorStrategy_init(uint256 _poolId, InitializeData memory _initializeData) internal {\\n        __BaseStrategy_init(_poolId);\\n\\n        nft = ERC721(_initializeData.nft);\\n        maxRecipientsAllowed = _initializeData.maxRecipientsAllowed;\\n\\n        _setupRound(_initializeData.roundStartTime, _initializeData.roundDuration, _initializeData.roundReward);\\n        _setPoolActive(true);\\n    }\\n\\n    /// ==================\\n    /// ==== Views =======\\n    /// ==================\\n\\n    /// @notice Get the allocators votes for a round\\n    /// @param _nftId The nft id\\n    /// @param _roundNumber The round number\\n    /// @return The number of votes\\n    function getAllocationsMade(uint256 _nftId, uint256 _roundNumber) external view returns (uint256) {\\n        return allocationsMade[_nftId][_roundNumber];\\n    }\\n\\n    /// @notice Get the total number of active recipients\\n    /// @return The total number of recipients\\n    function getActiveRecipientCount() external view returns (uint256) {\\n        return activeRecipients.length();\\n    }\\n\\n    /// @notice Get the total number of inactive recipients\\n    /// @return The total number of recipients\\n    function getInactiveRecipientCount() external view returns (uint256) {\\n        return inactiveRecipients.length();\\n    }\\n\\n    /// @notice Get the recipient by their index in the active recipients list\\n    /// @param _index The index of the recipient\\n    function getActiveRecipient(uint256 _index) external view returns (Recipient memory) {\\n        return _getRecipient(activeRecipients.at(_index));\\n    }\\n\\n    function getInactiveRecipient(uint256 _index) external view returns (Recipient memory) {\\n        return _getRecipient(inactiveRecipients.at(_index));\\n    }\\n\\n    /// @notice Get the recipient\\n    /// @param _recipientId Id of the recipient\\n    function getRecipient(address _recipientId) external view returns (Recipient memory) {\\n        return _getRecipient(_recipientId);\\n    }\\n\\n    /// @notice Checks if msg.sender is eligible for RFP allocation\\n    /// @param _recipientId Id of the recipient\\n    function _getRecipientStatus(address _recipientId) internal view override returns (Status) {\\n        return _getRecipient(_recipientId).recipientStatus;\\n    }\\n\\n    // ==================\\n    // ==== External ====\\n    // ==================\\n\\n    /// @notice Remove the recipient with the lowest number of votes after a round has ended\\n    function _removeRecipient() internal {\\n        uint256 recipientCount = activeRecipients.length();\\n        require(recipientCount > 0, \\\"NO_RECIPIENT_TO_REMOVE\\\");\\n\\n        // Find the recipient with the lowest votes\\n        address recipientIdWithLowestVotes;\\n        uint256 lowestVotes = type(uint256).max;\\n\\n        for (uint256 i = 0; i < recipientCount;) {\\n            address currentRecipientId = activeRecipients.at(i);\\n            Recipient memory currentRecipient = _getRecipient(currentRecipientId);\\n            if (currentRecipient.totalVotesReceived < lowestVotes) {\\n                lowestVotes = currentRecipient.totalVotesReceived;\\n                recipientIdWithLowestVotes = currentRecipientId;\\n            }\\n            \\n            unchecked {\\n                i++;\\n            }\\n        }\\n\\n        require(recipientIdWithLowestVotes != address(0), \\\"NO_RECIPIENT_TO_REMOVE\\\");\\n\\n        // Remove the recipient, mark them rejected and decrement the counter\\n        Recipient storage recipient = recipients[recipientIdWithLowestVotes];\\n        activeRecipients.remove(recipientIdWithLowestVotes);\\n        inactiveRecipients.add(recipientIdWithLowestVotes);\\n        recipient.recipientStatus = Status.Rejected;\\n        recipientsCounter--;\\n\\n        // Deduct any of their allocations for the total\\n        totalAllocations -= recipient.totalVotesReceived;\\n\\n        emit Removed(recipientIdWithLowestVotes, recipient.totalVotesReceived);\\n    }\\n\\n    // ==================\\n    // ==== Internal ====\\n    // ==================\\n\\n    /// @notice Checks if the allocation is active\\n    /// @dev Reverts if the allocation is not active\\n    function _checkOnlyActiveAllocation() internal view {\\n        // if (roundStartTime > block.timestamp || block.timestamp > roundStartTime + roundDuration) {\\n        //     revert ALLOCATION_NOT_ACTIVE();\\n        // }\\n    }\\n\\n    /// @notice Checks if the allocation has ended\\n    /// @dev Reverts if the allocation has not ended\\n    function _checkOnlyAfterAllocation() internal view {\\n        if (block.timestamp <= roundStartTime + roundDuration) {\\n            revert ALLOCATION_NOT_ENDED();\\n        }\\n    }\\n\\n    /// @notice Checks if the allocator is valid\\n    /// @param _allocator The allocator address\\n    /// @return true if the allocator is valid\\n    function _isValidAllocator(address _allocator) internal view override returns (bool) {\\n        return nft.balanceOf(_allocator) > 0;\\n    }\\n\\n    /// @notice Allocate votes to a recipient\\n    /// @param _data The data\\n    /// @param _sender The sender of the transaction\\n    /// @dev Only the NFT holder can call this function\\n    function _allocate(bytes memory _data, address _sender) internal override onlyActiveAllocation {\\n        (address recipientId, uint256 nftId) = abi.decode(_data, (address, uint256));\\n\\n        // If the allocator has already allocated their votes or is not the owner of the NFT\\n        if (\\n            activeRecipients.length() > 1\\n                && (allocationsMade[nftId][roundNumber] >= activeRecipients.length() - 1 || nft.ownerOf(nftId) != _sender)\\n        ) {\\n            revert UNAUTHORIZED();\\n        }\\n\\n        allocationsMade[nftId][roundNumber]++;\\n\\n        Recipient storage recipient = recipients[recipientId];\\n\\n        if (recipient.recipientStatus != Status.Accepted) {\\n            revert RECIPIENT_ERROR(recipientId);\\n        }\\n\\n        recipient.totalVotesReceived++;\\n        totalAllocations++;\\n\\n        emit Allocated(recipientId, 1, address(0), _sender);\\n    }\\n\\n    /// @notice Distribute the tokens to the recipients\\n    /// @param _sender The sender of the transaction\\n    function _distribute(address[] memory, bytes memory, address _sender) internal override onlyAfterAllocation {\\n        // Remove the recipient with the lowest number of votes after a round has ended\\n        _removeRecipient();\\n\\n        uint256 payoutLength = activeRecipients.length();\\n        for (uint256 i; i < payoutLength;) {\\n            address recipientId = activeRecipients.at(i);\\n            Recipient storage recipient = recipients[recipientId];\\n\\n            PayoutSummary memory payout = _getPayout(recipientId, \\\"\\\");\\n            uint256 amount = payout.amount;\\n \\n            if (amount == 0) {\\n                revert RECIPIENT_ERROR(recipientId);\\n            }\\n\\n            IAllo.Pool memory pool = allo.getPool(poolId);\\n            _transferAmount(pool.token, recipient.recipientAddress, amount);\\n            recipient.earned += amount;\\n\\n            emit Distributed(recipientId, recipient.recipientAddress, amount, _sender);\\n            unchecked {\\n                i++;\\n            }\\n        }\\n\\n        // Increase the round number\\n        roundNumber++;\\n    }\\n\\n    /// @notice Get the payout for a single recipient\\n    /// @param _recipientId The recipient id\\n    /// @return The payout as a PayoutSummary struct\\n    function _getPayout(address _recipientId, bytes memory) internal view override returns (PayoutSummary memory) {\\n        Recipient storage recipient = recipients[_recipientId];\\n\\n        uint256 totalVotesReceived = recipient.totalVotesReceived;\\n        uint256 amount = totalAllocations > 0 ? poolAmount * totalVotesReceived / totalAllocations : 0;\\n\\n        return PayoutSummary(recipient.recipientAddress, amount);\\n    }\\n\\n    /// @notice Submit application to pool\\n    /// @param _data The data to be decoded: address recipientId, address recipientAddress, Status status, Metadata memory metadata\\n    /// @param _sender The sender of the transaction\\n    function _registerRecipient(bytes memory _data, address _sender)\\n        internal\\n        override\\n        onlyPoolManager(_sender)\\n        returns (address)\\n    {\\n        (address recipientId, address recipientAddress, Status status, Metadata memory metadata) =\\n            abi.decode(_data, (address, address, Status, Metadata));\\n\\n        // validate decoded id and address\\n        if (recipientId == address(0) || recipientAddress == address(0)) {\\n            revert RECIPIENT_ERROR(recipientId);\\n        }\\n\\n        Recipient storage recipient = recipients[recipientId];\\n\\n        if (recipient.recipientStatus != Status.Accepted && status == Status.Accepted) {\\n            // when a recipient is accepted, increment the counter\\n            recipientsCounter++;\\n            // add the recipient to the active recipients list\\n            activeRecipients.add(recipientId);\\n        } else if (recipient.recipientStatus == Status.Accepted && status == Status.Rejected) {\\n            // when a recipient is rejected, increment the counter\\n            recipientsCounter--;\\n            // remove the recipient to the active recipients list\\n            activeRecipients.remove(recipientId);\\n        } else {\\n            revert RECIPIENT_ERROR(recipientId);\\n        }\\n\\n        if (recipientsCounter > maxRecipientsAllowed) {\\n            revert MAX_REACHED();\\n        }\\n\\n        // update the recipients data\\n        recipient.recipientAddress = recipientAddress;\\n        recipient.metadata = metadata;\\n        recipient.recipientStatus = status;\\n\\n        emit Registered(recipientId, _data, _sender);\\n\\n        return recipientId;\\n    }\\n\\n    /// @notice Set the round start time and the duration \\n    /// @param _roundStartTime The round start timestamp\\n    /// @param _roundDuration The duration of the round\\n    /// @param _roundReward The reward for the round\\n    function _setupRound(uint64 _roundStartTime, uint64 _roundDuration, uint256 _roundReward) internal {\\n        if (_roundStartTime < block.timestamp || _roundDuration == 0 || _roundReward == 0) {\\n            revert INVALID();\\n        }\\n\\n        roundStartTime = _roundStartTime;\\n        roundDuration = _roundDuration;\\n        roundReward = _roundReward;\\n    }\\n\\n    /// @notice Get the recipient\\n    /// @param _recipientId Id of the recipient\\n    function _getRecipient(address _recipientId) internal view returns (Recipient memory recipient) {\\n        recipient = recipients[_recipientId];\\n    }\\n\\n    /// @notice Receive function\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0xb261e85419032f32abb50e340951fb04a742a049fbe8a13cd6a852d9fd9219a0\",\"license\":\"AGPL-3.0-only\"},\"node_modules/allo-v2/contracts/core/interfaces/IAllo.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.19;\\n\\n// Interfaces\\nimport {IRegistry} from \\\"./IRegistry.sol\\\";\\nimport {IStrategy} from \\\"./IStrategy.sol\\\";\\n// Internal Libraries\\nimport {Metadata} from \\\"../libraries/Metadata.sol\\\";\\n\\n// \\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2880\\u28fe\\u28ff\\u28f7\\u2840\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28fc\\u28ff\\u28ff\\u28f7\\u28c4\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u28d7\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u286f\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\n// \\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2880\\u28ff\\u28ff\\u28ff\\u28ff\\u28f7\\u2840\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28fc\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u2844\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u28d7\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u286f\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\n// \\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u2844\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28f8\\u28ff\\u28ff\\u28ff\\u28bf\\u28ff\\u28ff\\u28ff\\u2840\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u28d7\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u286f\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\n// \\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2818\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28c4\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28f0\\u28ff\\u28ff\\u28ff\\u285f\\u2818\\u28ff\\u28ff\\u28ff\\u28f7\\u2840\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u28d7\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u286f\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\n// \\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28c0\\u28f4\\u28fe\\u28ff\\u28ff\\u28ff\\u28ff\\u28fe\\u283b\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u2846\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28a0\\u28ff\\u28ff\\u28ff\\u287f\\u2800\\u2800\\u2838\\u28ff\\u28ff\\u28ff\\u28e7\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u28d7\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u286f\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2880\\u28e0\\u28f4\\u28f4\\u28f6\\u28f6\\u28f6\\u28e6\\u28e6\\u28c0\\u2840\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\n// \\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28f4\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u287f\\u2803\\u2800\\u2819\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28a0\\u28ff\\u28ff\\u28ff\\u28ff\\u2801\\u2800\\u2800\\u2800\\u28bb\\u28ff\\u28ff\\u28ff\\u28e7\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u28d7\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u286f\\u2800\\u2800\\u2800\\u2800\\u28e0\\u28fe\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28f6\\u2840\\u2800\\u2800\\u2800\\u2800\\n// \\u2800\\u2800\\u2800\\u2800\\u2800\\u2880\\u28fe\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u287f\\u2801\\u2800\\u2800\\u2800\\u2818\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u287f\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2880\\u28fe\\u28ff\\u28ff\\u28ff\\u2803\\u2800\\u2800\\u2800\\u2800\\u2808\\u28bf\\u28ff\\u28ff\\u28ff\\u28c6\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u28d7\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u286f\\u2800\\u2800\\u2800\\u28f0\\u28ff\\u28ff\\u28ff\\u287f\\u280b\\u2801\\u2800\\u2800\\u2808\\u2818\\u2839\\u28ff\\u28ff\\u28ff\\u28ff\\u28c6\\u2800\\u2800\\u2800\\n// \\u2800\\u2800\\u2800\\u2800\\u2880\\u28fe\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u287f\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2808\\u28bf\\u28ff\\u28ff\\u28ff\\u2803\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28fe\\u28ff\\u28ff\\u28ff\\u280f\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2818\\u28ff\\u28ff\\u28ff\\u28ff\\u2844\\u2800\\u2800\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u28d7\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u286f\\u2800\\u2800\\u28b0\\u28ff\\u28ff\\u28ff\\u28ff\\u2801\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2818\\u28ff\\u28ff\\u28ff\\u28ff\\u2840\\u2800\\u2800\\n// \\u2800\\u2800\\u2800\\u28a0\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28df\\u2800\\u2840\\u2880\\u2800\\u2840\\u2880\\u2800\\u2840\\u2888\\u28bf\\u285f\\u2801\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28fc\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u2844\\u2800\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u28d7\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u286f\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u28d7\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28ff\\u28ff\\u28ff\\u28ff\\u2847\\u2800\\u2800\\n// \\u2800\\u2800\\u28e0\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u287f\\u280b\\u28bb\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28f7\\u28f6\\u28c4\\u2840\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28f8\\u28ff\\u28ff\\u28ff\\u287f\\u28bf\\u283f\\u283f\\u283f\\u283f\\u283f\\u283f\\u283f\\u283f\\u283f\\u28bf\\u28ff\\u28ff\\u28ff\\u28f7\\u2840\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u28d7\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u286f\\u2800\\u2800\\u2838\\u28ff\\u28ff\\u28ff\\u28f7\\u2840\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28a0\\u28ff\\u28ff\\u28ff\\u28ff\\u2802\\u2800\\u2800\\n// \\u2800\\u2800\\u2819\\u281b\\u283f\\u283b\\u283b\\u281b\\u2809\\u2800\\u2800\\u2808\\u28bf\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28f7\\u28c4\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28f0\\u28ff\\u28ff\\u28ff\\u28ff\\u2801\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28bf\\u28ff\\u28ff\\u28ff\\u28e7\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u28d7\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u286f\\u2800\\u2800\\u2800\\u28bb\\u28ff\\u28ff\\u28ff\\u28f7\\u28c0\\u2880\\u2800\\u2800\\u2800\\u2840\\u28f0\\u28fe\\u28ff\\u28ff\\u28ff\\u280f\\u2800\\u2800\\u2800\\n// \\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2808\\u281b\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u2844\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28b0\\u28ff\\u28ff\\u28ff\\u28ff\\u2803\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2818\\u28ff\\u28ff\\u28ff\\u28ff\\u28e7\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u28d7\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u286f\\u2800\\u2800\\u2800\\u2800\\u2839\\u28bf\\u28ff\\u28ff\\u28ff\\u28ff\\u28fe\\u28fe\\u28f7\\u28ff\\u28ff\\u28ff\\u28ff\\u287f\\u280b\\u2800\\u2800\\u2800\\u2800\\n// \\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2808\\u2819\\u2819\\u280b\\u281b\\u2819\\u280b\\u281b\\u2819\\u280b\\u281b\\u2819\\u280b\\u2803\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2820\\u283f\\u283b\\u281f\\u283f\\u2803\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2838\\u281f\\u283f\\u281f\\u283f\\u2806\\u2800\\u2838\\u283f\\u283f\\u281f\\u282f\\u2800\\u2800\\u2800\\u2838\\u283f\\u283f\\u283f\\u280f\\u2800\\u2800\\u2800\\u2800\\u2800\\u2808\\u2809\\u283b\\u283b\\u287f\\u28ff\\u28bf\\u287f\\u287f\\u283f\\u281b\\u2801\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\n//                    allo.gitcoin.co\\n\\n/// @title Allo Interface\\n/// @author @thelostone-mc <aditya@gitcoin.co>, @0xKurt <kurt@gitcoin.co>, @codenamejason <jason@gitcoin.co>, @0xZakk <zakk@gitcoin.co>, @nfrgosselin <nate@gitcoin.co>\\n/// @notice Interface for the Allo contract. It exposes all functions needed to use the Allo protocol.\\ninterface IAllo {\\n    /// ======================\\n    /// ======= Structs ======\\n    /// ======================\\n\\n    /// @notice the Pool struct that all strategy pools are based from\\n    struct Pool {\\n        bytes32 profileId;\\n        IStrategy strategy;\\n        address token;\\n        Metadata metadata;\\n        bytes32 managerRole;\\n        bytes32 adminRole;\\n    }\\n\\n    /// ======================\\n    /// ======= Events =======\\n    /// ======================\\n\\n    /// @notice Event emitted when a new pool is created\\n    /// @param poolId ID of the pool created\\n    /// @param profileId ID of the profile the pool is associated with\\n    /// @param strategy Address of the strategy contract\\n    /// @param token Address of the token pool was funded with when created\\n    /// @param amount Amount pool was funded with when created\\n    /// @param metadata Pool metadata\\n    event PoolCreated(\\n        uint256 indexed poolId,\\n        bytes32 indexed profileId,\\n        IStrategy strategy,\\n        address token,\\n        uint256 amount,\\n        Metadata metadata\\n    );\\n\\n    /// @notice Emitted when a pools metadata is updated\\n    /// @param poolId ID of the pool updated\\n    /// @param metadata Pool metadata that was updated\\n    event PoolMetadataUpdated(uint256 indexed poolId, Metadata metadata);\\n\\n    /// @notice Emitted when a pool is funded\\n    /// @param poolId ID of the pool funded\\n    /// @param amount Amount funded to the pool\\n    /// @param fee Amount of the fee paid to the treasury\\n    event PoolFunded(uint256 indexed poolId, uint256 amount, uint256 fee);\\n\\n    /// @notice Emitted when the base fee is paid\\n    /// @param poolId ID of the pool the base fee was paid for\\n    /// @param amount Amount of the base fee paid\\n    event BaseFeePaid(uint256 indexed poolId, uint256 amount);\\n\\n    /// @notice Emitted when the treasury address is updated\\n    /// @param treasury Address of the new treasury\\n    event TreasuryUpdated(address treasury);\\n\\n    /// @notice Emitted when the percent fee is updated\\n    /// @param percentFee New percentage for the fee\\n    event PercentFeeUpdated(uint256 percentFee);\\n\\n    /// @notice Emitted when the base fee is updated\\n    /// @param baseFee New base fee amount\\n    event BaseFeeUpdated(uint256 baseFee);\\n\\n    /// @notice Emitted when the registry address is updated\\n    /// @param registry Address of the new registry\\n    event RegistryUpdated(address registry);\\n\\n    /// @notice Emitted when a strategy is approved and added to the cloneable strategies\\n    /// @param strategy Address of the strategy approved\\n    event StrategyApproved(address strategy);\\n\\n    /// @notice Emitted when a strategy is removed from the cloneable strategies\\n    /// @param strategy Address of the strategy removed\\n    event StrategyRemoved(address strategy);\\n\\n    /// ====================================\\n    /// ==== External/Public Functions =====\\n    /// ====================================\\n\\n    /// @notice Initialize the Allo contract\\n    /// @param _owner Address of the owner\\n    /// @param _registry Address of the registry contract\\n    /// @param _treasury Address of the treasury\\n    /// @param _percentFee Percentage for the fee\\n    /// @param _baseFee Base fee amount\\n    function initialize(\\n        address _owner,\\n        address _registry,\\n        address payable _treasury,\\n        uint256 _percentFee,\\n        uint256 _baseFee\\n    ) external;\\n\\n    /// @notice Updates a pools metadata.\\n    /// @dev 'msg.sender' must be a pool admin.\\n    /// @param _poolId The ID of the pool to update\\n    /// @param _metadata The new metadata to set\\n    function updatePoolMetadata(uint256 _poolId, Metadata memory _metadata) external;\\n\\n    /// @notice Update the registry address.\\n    /// @dev 'msg.sender' must be the Allo contract owner.\\n    /// @param _registry The new registry address\\n    function updateRegistry(address _registry) external;\\n\\n    /// @notice Updates the treasury address.\\n    /// @dev 'msg.sender' must be the Allo contract owner.\\n    /// @param _treasury The new treasury address\\n    function updateTreasury(address payable _treasury) external;\\n\\n    /// @notice Updates the percentage for the fee.\\n    /// @dev 'msg.sender' must be the Allo contract owner.\\n    /// @param _percentFee The new percentage for the fee\\n    function updatePercentFee(uint256 _percentFee) external;\\n\\n    /// @notice Updates the base fee.\\n    /// @dev 'msg.sender' must be the Allo contract owner.\\n    /// @param _baseFee The new base fee\\n    function updateBaseFee(uint256 _baseFee) external;\\n\\n    /// @notice Adds a strategy to the cloneable strategies.\\n    /// @dev 'msg.sender' must be the Allo contract owner.\\n    /// @param _strategy The address of the strategy to add\\n    function addToCloneableStrategies(address _strategy) external;\\n\\n    /// @notice Removes a strategy from the cloneable strategies.\\n    /// @dev 'msg.sender' must be the Allo contract owner.\\n    /// @param _strategy The address of the strategy to remove\\n    function removeFromCloneableStrategies(address _strategy) external;\\n\\n    /// @notice Adds a pool manager to the pool.\\n    /// @dev 'msg.sender' must be a pool admin.\\n    /// @param _poolId The ID of the pool to add the manager to\\n    /// @param _manager The address of the manager to add\\n    function addPoolManager(uint256 _poolId, address _manager) external;\\n\\n    /// @notice Removes a pool manager from the pool.\\n    /// @dev 'msg.sender' must be a pool admin.\\n    /// @param _poolId The ID of the pool to remove the manager from\\n    /// @param _manager The address of the manager to remove\\n    function removePoolManager(uint256 _poolId, address _manager) external;\\n\\n    /// @notice Recovers funds from a pool.\\n    /// @dev 'msg.sender' must be a pool admin.\\n    /// @param _token The token to recover\\n    /// @param _recipient The address to send the recovered funds to\\n    function recoverFunds(address _token, address _recipient) external;\\n\\n    /// @notice Registers a recipient and emits {Registered} event if successful and may be handled differently by each strategy.\\n    /// @param _poolId The ID of the pool to register the recipient for\\n    function registerRecipient(uint256 _poolId, bytes memory _data) external payable returns (address);\\n\\n    /// @notice Registers a batch of recipients.\\n    /// @param _poolIds The pool ID's to register the recipients for\\n    /// @param _data The data to pass to the strategy and may be handled differently by each strategy\\n    function batchRegisterRecipient(uint256[] memory _poolIds, bytes[] memory _data)\\n        external\\n        returns (address[] memory);\\n\\n    /// @notice Funds a pool.\\n    /// @dev 'msg.value' must be greater than 0 if the token is the native token\\n    ///       or '_amount' must be greater than 0 if the token is not the native token.\\n    /// @param _poolId The ID of the pool to fund\\n    /// @param _amount The amount to fund the pool with\\n    function fundPool(uint256 _poolId, uint256 _amount) external payable;\\n\\n    /// @notice Allocates funds to a recipient.\\n    /// @dev Each strategy will handle the allocation of funds differently.\\n    /// @param _poolId The ID of the pool to allocate funds from\\n    /// @param _data The data to pass to the strategy and may be handled differently by each strategy.\\n    function allocate(uint256 _poolId, bytes memory _data) external payable;\\n\\n    /// @notice Allocates funds to multiple recipients.\\n    /// @dev Each strategy will handle the allocation of funds differently\\n    function batchAllocate(uint256[] calldata _poolIds, bytes[] memory _datas) external;\\n\\n    /// @notice Distributes funds to recipients and emits {Distributed} event if successful\\n    /// @dev Each strategy will handle the distribution of funds differently\\n    /// @param _poolId The ID of the pool to distribute from\\n    /// @param _recipientIds The recipient ids to distribute to\\n    /// @param _data The data to pass to the strategy and may be handled differently by each strategy\\n    function distribute(uint256 _poolId, address[] memory _recipientIds, bytes memory _data) external;\\n\\n    /// =========================\\n    /// ==== View Functions =====\\n    /// =========================\\n\\n    /// @notice Checks if an address is a pool admin.\\n    /// @param _poolId The ID of the pool to check\\n    /// @param _address The address to check\\n    /// @return 'true' if the '_address' is a pool admin, otherwise 'false'\\n    function isPoolAdmin(uint256 _poolId, address _address) external view returns (bool);\\n\\n    /// @notice Checks if an address is a pool manager.\\n    /// @param _poolId The ID of the pool to check\\n    /// @param _address The address to check\\n    /// @return 'true' if the '_address' is a pool manager, otherwise 'false'\\n    function isPoolManager(uint256 _poolId, address _address) external view returns (bool);\\n\\n    /// @notice Checks if a strategy is cloneable (is in the cloneableStrategies mapping).\\n    /// @param _strategy The address of the strategy to check\\n    /// @return 'true' if the '_strategy' is cloneable, otherwise 'false'\\n    function isCloneableStrategy(address _strategy) external view returns (bool);\\n\\n    /// @notice Returns the address of the strategy for a given 'poolId'\\n    /// @param _poolId The ID of the pool to check\\n    /// @return strategy The address of the strategy for the ID of the pool passed in\\n    function getStrategy(uint256 _poolId) external view returns (address);\\n\\n    /// @notice Returns the current percent fee\\n    /// @return percentFee The current percentage for the fee\\n    function getPercentFee() external view returns (uint256);\\n\\n    /// @notice Returns the current base fee\\n    /// @return baseFee The current base fee\\n    function getBaseFee() external view returns (uint256);\\n\\n    /// @notice Returns the current treasury address\\n    /// @return treasury The current treasury address\\n    function getTreasury() external view returns (address payable);\\n\\n    /// @notice Returns the current registry address\\n    /// @return registry The current registry address\\n    function getRegistry() external view returns (IRegistry);\\n\\n    /// @notice Returns the 'Pool' struct for a given 'poolId'\\n    /// @param _poolId The ID of the pool to check\\n    /// @return pool The 'Pool' struct for the ID of the pool passed in\\n    function getPool(uint256 _poolId) external view returns (Pool memory);\\n\\n    /// @notice Returns the current fee denominator\\n    /// @dev 1e18 represents 100%\\n    /// @return feeDenominator The current fee denominator\\n    function getFeeDenominator() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x752bbf7be2275b2d0e6323063775fc5afe3c360a2dae9b879452a42e8b2280ce\",\"license\":\"AGPL-3.0-only\"},\"node_modules/allo-v2/contracts/core/interfaces/IRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\n// Internal Libraries\\nimport {Metadata} from \\\"../libraries/Metadata.sol\\\";\\n\\n// \\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2880\\u28fe\\u28ff\\u28f7\\u2840\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28fc\\u28ff\\u28ff\\u28f7\\u28c4\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u28d7\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u286f\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\n// \\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2880\\u28ff\\u28ff\\u28ff\\u28ff\\u28f7\\u2840\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28fc\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u2844\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u28d7\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u286f\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\n// \\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u2844\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28f8\\u28ff\\u28ff\\u28ff\\u28bf\\u28ff\\u28ff\\u28ff\\u2840\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u28d7\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u286f\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\n// \\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2818\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28c4\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28f0\\u28ff\\u28ff\\u28ff\\u285f\\u2818\\u28ff\\u28ff\\u28ff\\u28f7\\u2840\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u28d7\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u286f\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\n// \\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28c0\\u28f4\\u28fe\\u28ff\\u28ff\\u28ff\\u28ff\\u28fe\\u283b\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u2846\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28a0\\u28ff\\u28ff\\u28ff\\u287f\\u2800\\u2800\\u2838\\u28ff\\u28ff\\u28ff\\u28e7\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u28d7\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u286f\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2880\\u28e0\\u28f4\\u28f4\\u28f6\\u28f6\\u28f6\\u28e6\\u28e6\\u28c0\\u2840\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\n// \\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28f4\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u287f\\u2803\\u2800\\u2819\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28a0\\u28ff\\u28ff\\u28ff\\u28ff\\u2801\\u2800\\u2800\\u2800\\u28bb\\u28ff\\u28ff\\u28ff\\u28e7\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u28d7\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u286f\\u2800\\u2800\\u2800\\u2800\\u28e0\\u28fe\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28f6\\u2840\\u2800\\u2800\\u2800\\u2800\\n// \\u2800\\u2800\\u2800\\u2800\\u2800\\u2880\\u28fe\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u287f\\u2801\\u2800\\u2800\\u2800\\u2818\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u287f\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2880\\u28fe\\u28ff\\u28ff\\u28ff\\u2803\\u2800\\u2800\\u2800\\u2800\\u2808\\u28bf\\u28ff\\u28ff\\u28ff\\u28c6\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u28d7\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u286f\\u2800\\u2800\\u2800\\u28f0\\u28ff\\u28ff\\u28ff\\u287f\\u280b\\u2801\\u2800\\u2800\\u2808\\u2818\\u2839\\u28ff\\u28ff\\u28ff\\u28ff\\u28c6\\u2800\\u2800\\u2800\\n// \\u2800\\u2800\\u2800\\u2800\\u2880\\u28fe\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u287f\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2808\\u28bf\\u28ff\\u28ff\\u28ff\\u2803\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28fe\\u28ff\\u28ff\\u28ff\\u280f\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2818\\u28ff\\u28ff\\u28ff\\u28ff\\u2844\\u2800\\u2800\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u28d7\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u286f\\u2800\\u2800\\u28b0\\u28ff\\u28ff\\u28ff\\u28ff\\u2801\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2818\\u28ff\\u28ff\\u28ff\\u28ff\\u2840\\u2800\\u2800\\n// \\u2800\\u2800\\u2800\\u28a0\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28df\\u2800\\u2840\\u2880\\u2800\\u2840\\u2880\\u2800\\u2840\\u2888\\u28bf\\u285f\\u2801\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28fc\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u2844\\u2800\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u28d7\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u286f\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u28d7\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28ff\\u28ff\\u28ff\\u28ff\\u2847\\u2800\\u2800\\n// \\u2800\\u2800\\u28e0\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u287f\\u280b\\u28bb\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28f7\\u28f6\\u28c4\\u2840\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28f8\\u28ff\\u28ff\\u28ff\\u287f\\u28bf\\u283f\\u283f\\u283f\\u283f\\u283f\\u283f\\u283f\\u283f\\u283f\\u28bf\\u28ff\\u28ff\\u28ff\\u28f7\\u2840\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u28d7\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u286f\\u2800\\u2800\\u2838\\u28ff\\u28ff\\u28ff\\u28f7\\u2840\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28a0\\u28ff\\u28ff\\u28ff\\u28ff\\u2802\\u2800\\u2800\\n// \\u2800\\u2800\\u2819\\u281b\\u283f\\u283b\\u283b\\u281b\\u2809\\u2800\\u2800\\u2808\\u28bf\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28f7\\u28c4\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28f0\\u28ff\\u28ff\\u28ff\\u28ff\\u2801\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28bf\\u28ff\\u28ff\\u28ff\\u28e7\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u28d7\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u286f\\u2800\\u2800\\u2800\\u28bb\\u28ff\\u28ff\\u28ff\\u28f7\\u28c0\\u2880\\u2800\\u2800\\u2800\\u2840\\u28f0\\u28fe\\u28ff\\u28ff\\u28ff\\u280f\\u2800\\u2800\\u2800\\n// \\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2808\\u281b\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u2844\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28b0\\u28ff\\u28ff\\u28ff\\u28ff\\u2803\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2818\\u28ff\\u28ff\\u28ff\\u28ff\\u28e7\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u28d7\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u286f\\u2800\\u2800\\u2800\\u2800\\u2839\\u28bf\\u28ff\\u28ff\\u28ff\\u28ff\\u28fe\\u28fe\\u28f7\\u28ff\\u28ff\\u28ff\\u28ff\\u287f\\u280b\\u2800\\u2800\\u2800\\u2800\\n// \\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2808\\u2819\\u2819\\u280b\\u281b\\u2819\\u280b\\u281b\\u2819\\u280b\\u281b\\u2819\\u280b\\u2803\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2820\\u283f\\u283b\\u281f\\u283f\\u2803\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2838\\u281f\\u283f\\u281f\\u283f\\u2806\\u2800\\u2838\\u283f\\u283f\\u281f\\u282f\\u2800\\u2800\\u2800\\u2838\\u283f\\u283f\\u283f\\u280f\\u2800\\u2800\\u2800\\u2800\\u2800\\u2808\\u2809\\u283b\\u283b\\u287f\\u28ff\\u28bf\\u287f\\u287f\\u283f\\u281b\\u2801\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\n//                    allo.gitcoin.co\\n\\n/// @title IRegistry Interface\\n/// @author @thelostone-mc <aditya@gitcoin.co>, @0xKurt <kurt@gitcoin.co>, @codenamejason <jason@gitcoin.co>, @0xZakk <zakk@gitcoin.co>, @nfrgosselin <nate@gitcoin.co>\\n/// @notice Interface for the Registry contract and exposes all functions needed to use the Registry\\n///         within the Allo protocol.\\n/// @dev The Registry Interface is used to interact with the Allo protocol and create profiles\\n///      that can be used to interact with the Allo protocol. The Registry is the main contract\\n///      that all other contracts interact with to get the 'Profile' information needed to\\n///      interact with the Allo protocol. The Registry is also used to create new profiles\\n///      and update existing profiles. The Registry is also used to add and remove members\\n///      from a profile. The Registry will not always be used in a strategy and will depend on\\n///      the strategy being used.\\ninterface IRegistry {\\n    /// ======================\\n    /// ======= Structs ======\\n    /// ======================\\n\\n    /// @dev The Profile struct that all profiles are based from\\n    struct Profile {\\n        bytes32 id;\\n        uint256 nonce;\\n        string name;\\n        Metadata metadata;\\n        address owner;\\n        address anchor;\\n    }\\n\\n    /// ======================\\n    /// ======= Events =======\\n    /// ======================\\n\\n    /// @dev Emitted when a profile is created. This will return your anchor address.\\n    event ProfileCreated(\\n        bytes32 indexed profileId, uint256 nonce, string name, Metadata metadata, address owner, address anchor\\n    );\\n\\n    /// @dev Emitted when a profile name is updated. This will update the anchor when the name is updated and return it.\\n    event ProfileNameUpdated(bytes32 indexed profileId, string name, address anchor);\\n\\n    /// @dev Emitted when a profile's metadata is updated.\\n    event ProfileMetadataUpdated(bytes32 indexed profileId, Metadata metadata);\\n\\n    /// @dev Emitted when a profile owner is updated.\\n    event ProfileOwnerUpdated(bytes32 indexed profileId, address owner);\\n\\n    /// @dev Emitted when a profile pending owner is updated.\\n    event ProfilePendingOwnerUpdated(bytes32 indexed profileId, address pendingOwner);\\n\\n    /// =========================\\n    /// ==== View Functions =====\\n    /// =========================\\n\\n    /// @dev Returns the 'Profile' for a '_profileId' passed\\n    /// @param _profileId The 'profileId' to return the 'Profile' for\\n    /// @return profile The 'Profile' for the '_profileId' passed\\n    function getProfileById(bytes32 _profileId) external view returns (Profile memory profile);\\n\\n    /// @dev Returns the 'Profile' for an '_anchor' passed\\n    /// @param _anchor The 'anchor' to return the 'Profile' for\\n    /// @return profile The 'Profile' for the '_anchor' passed\\n    function getProfileByAnchor(address _anchor) external view returns (Profile memory profile);\\n\\n    /// @dev Returns a boolean if the '_account' is a member or owner of the '_profileId' passed in\\n    /// @param _profileId The 'profileId' to check if the '_account' is a member or owner of\\n    /// @param _account The 'account' to check if they are a member or owner of the '_profileId' passed in\\n    /// @return isOwnerOrMemberOfProfile A boolean if the '_account' is a member or owner of the '_profileId' passed in\\n    function isOwnerOrMemberOfProfile(bytes32 _profileId, address _account)\\n        external\\n        view\\n        returns (bool isOwnerOrMemberOfProfile);\\n\\n    /// @dev Returns a boolean if the '_account' is an owner of the '_profileId' passed in\\n    /// @param _profileId The 'profileId' to check if the '_account' is an owner of\\n    /// @param _owner The 'owner' to check if they are an owner of the '_profileId' passed in\\n    /// @return isOwnerOfProfile A boolean if the '_account' is an owner of the '_profileId' passed in\\n    function isOwnerOfProfile(bytes32 _profileId, address _owner) external view returns (bool isOwnerOfProfile);\\n\\n    /// @dev Returns a boolean if the '_account' is a member of the '_profileId' passed in\\n    /// @param _profileId The 'profileId' to check if the '_account' is a member of\\n    /// @param _member The 'member' to check if they are a member of the '_profileId' passed in\\n    /// @return isMemberOfProfile A boolean if the '_account' is a member of the '_profileId' passed in\\n    function isMemberOfProfile(bytes32 _profileId, address _member) external view returns (bool isMemberOfProfile);\\n\\n    /// ====================================\\n    /// ==== External/Public Functions =====\\n    /// ====================================\\n\\n    /// @dev Creates a new 'Profile' and returns the 'profileId' of the new profile\\n    ///\\n    /// Note: The 'name' and 'nonce' are used to generate the 'anchor' address\\n    ///\\n    /// Requirements: None, anyone can create a new profile\\n    ///\\n    /// @param _nonce The nonce to use to generate the 'anchor' address\\n    /// @param _name The name to use to generate the 'anchor' address\\n    /// @param _metadata The 'Metadata' to use to generate the 'anchor' address\\n    /// @param _owner The 'owner' to use to generate the 'anchor' address\\n    /// @param _members The 'members' to use to generate the 'anchor' address\\n    /// @return profileId The 'profileId' of the new profile\\n    function createProfile(\\n        uint256 _nonce,\\n        string memory _name,\\n        Metadata memory _metadata,\\n        address _owner,\\n        address[] memory _members\\n    ) external returns (bytes32 profileId);\\n\\n    /// @dev Updates the 'name' of the '_profileId' passed in and returns the new 'anchor' address\\n    ///\\n    /// Requirements: Only the 'Profile' owner can update the name\\n    ///\\n    /// Note: The 'name' and 'nonce' are used to generate the 'anchor' address and this will update the 'anchor'\\n    ///       so please use caution. You can always recreate your 'anchor' address by updating the name back\\n    ///       to the original name used to create the profile.\\n    ///\\n    /// @param _profileId The 'profileId' to update the name for\\n    /// @param _name The new 'name' value\\n    /// @return anchor The new 'anchor' address\\n    function updateProfileName(bytes32 _profileId, string memory _name) external returns (address anchor);\\n\\n    /// @dev Updates the 'Metadata' of the '_profileId' passed in\\n    ///\\n    /// Requirements: Only the 'Profile' owner can update the metadata\\n    ///\\n    /// @param _profileId The 'profileId' to update the metadata for\\n    /// @param _metadata The new 'Metadata' value\\n    function updateProfileMetadata(bytes32 _profileId, Metadata memory _metadata) external;\\n\\n    /// @dev Updates the pending 'owner' of the '_profileId' passed in\\n    ///\\n    /// Requirements: Only the 'Profile' owner can update the pending owner\\n    ///\\n    /// @param _profileId The 'profileId' to update the pending owner for\\n    /// @param _pendingOwner The new pending 'owner' value\\n    function updateProfilePendingOwner(bytes32 _profileId, address _pendingOwner) external;\\n\\n    /// @dev Accepts the pending 'owner' of the '_profileId' passed in\\n    ///\\n    /// Requirements: Only the pending owner can accept the ownership\\n    ///\\n    /// @param _profileId The 'profileId' to accept the ownership for\\n    function acceptProfileOwnership(bytes32 _profileId) external;\\n\\n    /// @dev Adds members to the '_profileId' passed in\\n    ///\\n    /// Requirements: Only the 'Profile' owner can add members\\n    ///\\n    /// @param _profileId The 'profileId' to add members to\\n    /// @param _members The members to add to the '_profileId' passed in\\n    function addMembers(bytes32 _profileId, address[] memory _members) external;\\n\\n    /// @dev Removes members from the '_profileId' passed in\\n    ///\\n    /// Requirements: Only the 'Profile' owner can remove members\\n    ///\\n    /// @param _profileId The 'profileId' to remove members from\\n    /// @param _members The members to remove from the '_profileId' passed in\\n    function removeMembers(bytes32 _profileId, address[] memory _members) external;\\n\\n    /// @dev Recovers funds from the contract\\n    ///\\n    /// Requirements: Must be the Allo owner\\n    ///\\n    /// @param _token The token you want to use to recover funds\\n    /// @param _recipient The recipient of the recovered funds\\n    function recoverFunds(address _token, address _recipient) external;\\n}\\n\",\"keccak256\":\"0x3a2edcea094551fc86612932d42bd6b4682d20fb7b46cfdbeee39ba85367749f\",\"license\":\"MIT\"},\"node_modules/allo-v2/contracts/core/interfaces/IStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.19;\\n\\n// Interfaces\\nimport {IAllo} from \\\"./IAllo.sol\\\";\\n\\n// \\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2880\\u28fe\\u28ff\\u28f7\\u2840\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28fc\\u28ff\\u28ff\\u28f7\\u28c4\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u28d7\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u286f\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\n// \\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2880\\u28ff\\u28ff\\u28ff\\u28ff\\u28f7\\u2840\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28fc\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u2844\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u28d7\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u286f\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\n// \\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u2844\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28f8\\u28ff\\u28ff\\u28ff\\u28bf\\u28ff\\u28ff\\u28ff\\u2840\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u28d7\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u286f\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\n// \\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2818\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28c4\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28f0\\u28ff\\u28ff\\u28ff\\u285f\\u2818\\u28ff\\u28ff\\u28ff\\u28f7\\u2840\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u28d7\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u286f\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\n// \\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28c0\\u28f4\\u28fe\\u28ff\\u28ff\\u28ff\\u28ff\\u28fe\\u283b\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u2846\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28a0\\u28ff\\u28ff\\u28ff\\u287f\\u2800\\u2800\\u2838\\u28ff\\u28ff\\u28ff\\u28e7\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u28d7\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u286f\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2880\\u28e0\\u28f4\\u28f4\\u28f6\\u28f6\\u28f6\\u28e6\\u28e6\\u28c0\\u2840\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\n// \\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28f4\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u287f\\u2803\\u2800\\u2819\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28a0\\u28ff\\u28ff\\u28ff\\u28ff\\u2801\\u2800\\u2800\\u2800\\u28bb\\u28ff\\u28ff\\u28ff\\u28e7\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u28d7\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u286f\\u2800\\u2800\\u2800\\u2800\\u28e0\\u28fe\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28f6\\u2840\\u2800\\u2800\\u2800\\u2800\\n// \\u2800\\u2800\\u2800\\u2800\\u2800\\u2880\\u28fe\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u287f\\u2801\\u2800\\u2800\\u2800\\u2818\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u287f\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2880\\u28fe\\u28ff\\u28ff\\u28ff\\u2803\\u2800\\u2800\\u2800\\u2800\\u2808\\u28bf\\u28ff\\u28ff\\u28ff\\u28c6\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u28d7\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u286f\\u2800\\u2800\\u2800\\u28f0\\u28ff\\u28ff\\u28ff\\u287f\\u280b\\u2801\\u2800\\u2800\\u2808\\u2818\\u2839\\u28ff\\u28ff\\u28ff\\u28ff\\u28c6\\u2800\\u2800\\u2800\\n// \\u2800\\u2800\\u2800\\u2800\\u2880\\u28fe\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u287f\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2808\\u28bf\\u28ff\\u28ff\\u28ff\\u2803\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28fe\\u28ff\\u28ff\\u28ff\\u280f\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2818\\u28ff\\u28ff\\u28ff\\u28ff\\u2844\\u2800\\u2800\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u28d7\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u286f\\u2800\\u2800\\u28b0\\u28ff\\u28ff\\u28ff\\u28ff\\u2801\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2818\\u28ff\\u28ff\\u28ff\\u28ff\\u2840\\u2800\\u2800\\n// \\u2800\\u2800\\u2800\\u28a0\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28df\\u2800\\u2840\\u2880\\u2800\\u2840\\u2880\\u2800\\u2840\\u2888\\u28bf\\u285f\\u2801\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28fc\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u2844\\u2800\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u28d7\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u286f\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u28d7\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28ff\\u28ff\\u28ff\\u28ff\\u2847\\u2800\\u2800\\n// \\u2800\\u2800\\u28e0\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u287f\\u280b\\u28bb\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28f7\\u28f6\\u28c4\\u2840\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28f8\\u28ff\\u28ff\\u28ff\\u287f\\u28bf\\u283f\\u283f\\u283f\\u283f\\u283f\\u283f\\u283f\\u283f\\u283f\\u28bf\\u28ff\\u28ff\\u28ff\\u28f7\\u2840\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u28d7\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u286f\\u2800\\u2800\\u2838\\u28ff\\u28ff\\u28ff\\u28f7\\u2840\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28a0\\u28ff\\u28ff\\u28ff\\u28ff\\u2802\\u2800\\u2800\\n// \\u2800\\u2800\\u2819\\u281b\\u283f\\u283b\\u283b\\u281b\\u2809\\u2800\\u2800\\u2808\\u28bf\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28f7\\u28c4\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28f0\\u28ff\\u28ff\\u28ff\\u28ff\\u2801\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28bf\\u28ff\\u28ff\\u28ff\\u28e7\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u28d7\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u286f\\u2800\\u2800\\u2800\\u28bb\\u28ff\\u28ff\\u28ff\\u28f7\\u28c0\\u2880\\u2800\\u2800\\u2800\\u2840\\u28f0\\u28fe\\u28ff\\u28ff\\u28ff\\u280f\\u2800\\u2800\\u2800\\n// \\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2808\\u281b\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u2844\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28b0\\u28ff\\u28ff\\u28ff\\u28ff\\u2803\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2818\\u28ff\\u28ff\\u28ff\\u28ff\\u28e7\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u28d7\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u286f\\u2800\\u2800\\u2800\\u2800\\u2839\\u28bf\\u28ff\\u28ff\\u28ff\\u28ff\\u28fe\\u28fe\\u28f7\\u28ff\\u28ff\\u28ff\\u28ff\\u287f\\u280b\\u2800\\u2800\\u2800\\u2800\\n// \\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2808\\u2819\\u2819\\u280b\\u281b\\u2819\\u280b\\u281b\\u2819\\u280b\\u281b\\u2819\\u280b\\u2803\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2820\\u283f\\u283b\\u281f\\u283f\\u2803\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2838\\u281f\\u283f\\u281f\\u283f\\u2806\\u2800\\u2838\\u283f\\u283f\\u281f\\u282f\\u2800\\u2800\\u2800\\u2838\\u283f\\u283f\\u283f\\u280f\\u2800\\u2800\\u2800\\u2800\\u2800\\u2808\\u2809\\u283b\\u283b\\u287f\\u28ff\\u28bf\\u287f\\u287f\\u283f\\u281b\\u2801\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\n//                    allo.gitcoin.co\\n\\n/// @title IStrategy Interface\\n/// @author @thelostone-mc <aditya@gitcoin.co>, @0xKurt <kurt@gitcoin.co>, @codenamejason <jason@gitcoin.co>, @0xZakk <zakk@gitcoin.co>, @nfrgosselin <nate@gitcoin.co> @0xZakk <zakk@gitcoin.co>, @nfrgosselin <nate@gitcoin.co>\\n/// @notice BaseStrategy is the base contract that all strategies should inherit from and uses this interface.\\n\\ninterface IStrategy {\\n    /// ======================\\n    /// ======= Storage ======\\n    /// ======================\\n\\n    /// @notice The Status enum that all recipients are based from\\n    enum Status {\\n        None,\\n        Pending,\\n        Accepted,\\n        Rejected,\\n        Appealed,\\n        InReview,\\n        Canceled\\n    }\\n\\n    /// @notice Payout summary struct to hold the payout data\\n    struct PayoutSummary {\\n        address recipientAddress;\\n        uint256 amount;\\n    }\\n\\n    /// ======================\\n    /// ======= Events =======\\n    /// ======================\\n\\n    /// @notice Emitted when strategy is initialized.\\n    /// @param poolId The ID of the pool\\n    /// @param data The data passed to the 'initialize' function\\n    event Initialized(uint256 poolId, bytes data);\\n\\n    /// @notice Emitted when a recipient is registered.\\n    /// @param recipientId The ID of the recipient\\n    /// @param data The data passed to the 'registerRecipient' function\\n    /// @param sender The sender\\n    event Registered(address indexed recipientId, bytes data, address sender);\\n\\n    /// @notice Emitted when a recipient is allocated to.\\n    /// @param recipientId The ID of the recipient\\n    /// @param amount The amount allocated\\n    /// @param token The token allocated\\n    event Allocated(address indexed recipientId, uint256 amount, address token, address sender);\\n\\n    /// @notice Emitted when tokens are distributed.\\n    /// @param recipientId The ID of the recipient\\n    /// @param recipientAddress The recipient\\n    /// @param amount The amount distributed\\n    /// @param sender The sender\\n    event Distributed(address indexed recipientId, address recipientAddress, uint256 amount, address sender);\\n\\n    /// @notice Emitted when pool is set to active status.\\n    /// @param active The status of the pool\\n    event PoolActive(bool active);\\n\\n    /// ======================\\n    /// ======= Views ========\\n    /// ======================\\n\\n    /// @notice Getter for the address of the Allo contract.\\n    /// @return The 'Allo' contract\\n    function getAllo() external view returns (IAllo);\\n\\n    /// @notice Getter for the 'poolId' for this strategy.\\n    /// @return The ID of the pool\\n    function getPoolId() external view returns (uint256);\\n\\n    /// @notice Getter for the 'id' of the strategy.\\n    /// @return The ID of the strategy\\n    function getStrategyId() external view returns (bytes32);\\n\\n    /// @notice Checks whether a allocator is valid or not, will usually be true for all strategies\\n    ///      and will depend on the strategy implementation.\\n    /// @param _allocator The allocator to check\\n    /// @return Whether the allocator is valid or not\\n    function isValidAllocator(address _allocator) external view returns (bool);\\n\\n    /// @notice whether pool is active.\\n    /// @return Whether the pool is active or not\\n    function isPoolActive() external returns (bool);\\n\\n    /// @notice Checks the amount of tokens in the pool.\\n    /// @return The balance of the pool\\n    function getPoolAmount() external view returns (uint256);\\n\\n    /// @notice Increases the balance of the pool.\\n    /// @param _amount The amount to increase the pool by\\n    function increasePoolAmount(uint256 _amount) external;\\n\\n    /// @notice Checks the status of a recipient probably tracked in a mapping, but will depend on the implementation\\n    ///      for example, the OpenSelfRegistration only maps users to bool, and then assumes Accepted for those\\n    ///      since there is no need for Pending or Rejected.\\n    /// @param _recipientId The ID of the recipient\\n    /// @return The status of the recipient\\n    function getRecipientStatus(address _recipientId) external view returns (Status);\\n\\n    /// @notice Checks the amount allocated to a recipient for distribution.\\n    /// @dev Input the values you would send to distribute(), get the amounts each recipient in the array would receive.\\n    ///      The encoded '_data' will be determined by the strategy, and will be used to determine the payout.\\n    /// @param _recipientIds The IDs of the recipients\\n    /// @param _data The encoded data\\n    function getPayouts(address[] memory _recipientIds, bytes[] memory _data)\\n        external\\n        view\\n        returns (PayoutSummary[] memory);\\n\\n    /// ======================\\n    /// ===== Functions ======\\n    /// ======================\\n\\n    /// @notice\\n    /// @dev The default BaseStrategy version will not use the data  if a strategy wants to use it, they will overwrite it,\\n    ///      use it, and then call super.initialize().\\n    /// @param _poolId The ID of the pool\\n    /// @param _data The encoded data\\n    function initialize(uint256 _poolId, bytes memory _data) external;\\n\\n    /// @notice This will register a recipient, set their status (and any other strategy specific values), and\\n    ///         return the ID of the recipient.\\n    /// @dev Able to change status all the way up to 'Accepted', or to 'Pending' and if there are more steps, additional\\n    ///      functions should be added to allow the owner to check this. The owner could also check attestations directly\\n    ///      and then accept for instance. The '_data' will be determined by the strategy implementation.\\n    /// @param _data The data to use to register the recipient\\n    /// @param _sender The address of the sender\\n    /// @return The ID of the recipient\\n    function registerRecipient(bytes memory _data, address _sender) external payable returns (address);\\n\\n    /// @notice This will allocate to a recipient.\\n    /// @dev The encoded '_data' will be determined by the strategy implementation.\\n    /// @param _data The data to use to allocate to the recipient\\n    /// @param _sender The address of the sender\\n    function allocate(bytes memory _data, address _sender) external payable;\\n\\n    /// @notice This will distribute funds (tokens) to recipients.\\n    /// @dev most strategies will track a TOTAL amount per recipient, and a PAID amount, and pay the difference\\n    /// this contract will need to track the amount paid already, so that it doesn't double pay.\\n    function distribute(address[] memory _recipientIds, bytes memory _data, address _sender) external;\\n}\\n\",\"keccak256\":\"0xebd143a6729d7fe650ffd83a2dc1941e19ce9285526e5cb4d6c32adba3f3cf23\",\"license\":\"AGPL-3.0-only\"},\"node_modules/allo-v2/contracts/core/libraries/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.19;\\n\\n// \\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2880\\u28fe\\u28ff\\u28f7\\u2840\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28fc\\u28ff\\u28ff\\u28f7\\u28c4\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u28d7\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u286f\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\n// \\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2880\\u28ff\\u28ff\\u28ff\\u28ff\\u28f7\\u2840\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28fc\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u2844\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u28d7\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u286f\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\n// \\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u2844\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28f8\\u28ff\\u28ff\\u28ff\\u28bf\\u28ff\\u28ff\\u28ff\\u2840\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u28d7\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u286f\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\n// \\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2818\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28c4\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28f0\\u28ff\\u28ff\\u28ff\\u285f\\u2818\\u28ff\\u28ff\\u28ff\\u28f7\\u2840\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u28d7\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u286f\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\n// \\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28c0\\u28f4\\u28fe\\u28ff\\u28ff\\u28ff\\u28ff\\u28fe\\u283b\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u2846\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28a0\\u28ff\\u28ff\\u28ff\\u287f\\u2800\\u2800\\u2838\\u28ff\\u28ff\\u28ff\\u28e7\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u28d7\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u286f\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2880\\u28e0\\u28f4\\u28f4\\u28f6\\u28f6\\u28f6\\u28e6\\u28e6\\u28c0\\u2840\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\n// \\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28f4\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u287f\\u2803\\u2800\\u2819\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28a0\\u28ff\\u28ff\\u28ff\\u28ff\\u2801\\u2800\\u2800\\u2800\\u28bb\\u28ff\\u28ff\\u28ff\\u28e7\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u28d7\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u286f\\u2800\\u2800\\u2800\\u2800\\u28e0\\u28fe\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28f6\\u2840\\u2800\\u2800\\u2800\\u2800\\n// \\u2800\\u2800\\u2800\\u2800\\u2800\\u2880\\u28fe\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u287f\\u2801\\u2800\\u2800\\u2800\\u2818\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u287f\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2880\\u28fe\\u28ff\\u28ff\\u28ff\\u2803\\u2800\\u2800\\u2800\\u2800\\u2808\\u28bf\\u28ff\\u28ff\\u28ff\\u28c6\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u28d7\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u286f\\u2800\\u2800\\u2800\\u28f0\\u28ff\\u28ff\\u28ff\\u287f\\u280b\\u2801\\u2800\\u2800\\u2808\\u2818\\u2839\\u28ff\\u28ff\\u28ff\\u28ff\\u28c6\\u2800\\u2800\\u2800\\n// \\u2800\\u2800\\u2800\\u2800\\u2880\\u28fe\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u287f\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2808\\u28bf\\u28ff\\u28ff\\u28ff\\u2803\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28fe\\u28ff\\u28ff\\u28ff\\u280f\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2818\\u28ff\\u28ff\\u28ff\\u28ff\\u2844\\u2800\\u2800\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u28d7\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u286f\\u2800\\u2800\\u28b0\\u28ff\\u28ff\\u28ff\\u28ff\\u2801\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2818\\u28ff\\u28ff\\u28ff\\u28ff\\u2840\\u2800\\u2800\\n// \\u2800\\u2800\\u2800\\u28a0\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28df\\u2800\\u2840\\u2880\\u2800\\u2840\\u2880\\u2800\\u2840\\u2888\\u28bf\\u285f\\u2801\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28fc\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u2844\\u2800\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u28d7\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u286f\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u28d7\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28ff\\u28ff\\u28ff\\u28ff\\u2847\\u2800\\u2800\\n// \\u2800\\u2800\\u28e0\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u287f\\u280b\\u28bb\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28f7\\u28f6\\u28c4\\u2840\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28f8\\u28ff\\u28ff\\u28ff\\u287f\\u28bf\\u283f\\u283f\\u283f\\u283f\\u283f\\u283f\\u283f\\u283f\\u283f\\u28bf\\u28ff\\u28ff\\u28ff\\u28f7\\u2840\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u28d7\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u286f\\u2800\\u2800\\u2838\\u28ff\\u28ff\\u28ff\\u28f7\\u2840\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28a0\\u28ff\\u28ff\\u28ff\\u28ff\\u2802\\u2800\\u2800\\n// \\u2800\\u2800\\u2819\\u281b\\u283f\\u283b\\u283b\\u281b\\u2809\\u2800\\u2800\\u2808\\u28bf\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28f7\\u28c4\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28f0\\u28ff\\u28ff\\u28ff\\u28ff\\u2801\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28bf\\u28ff\\u28ff\\u28ff\\u28e7\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u28d7\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u286f\\u2800\\u2800\\u2800\\u28bb\\u28ff\\u28ff\\u28ff\\u28f7\\u28c0\\u2880\\u2800\\u2800\\u2800\\u2840\\u28f0\\u28fe\\u28ff\\u28ff\\u28ff\\u280f\\u2800\\u2800\\u2800\\n// \\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2808\\u281b\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u2844\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28b0\\u28ff\\u28ff\\u28ff\\u28ff\\u2803\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2818\\u28ff\\u28ff\\u28ff\\u28ff\\u28e7\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u28d7\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u286f\\u2800\\u2800\\u2800\\u2800\\u2839\\u28bf\\u28ff\\u28ff\\u28ff\\u28ff\\u28fe\\u28fe\\u28f7\\u28ff\\u28ff\\u28ff\\u28ff\\u287f\\u280b\\u2800\\u2800\\u2800\\u2800\\n// \\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2808\\u2819\\u2819\\u280b\\u281b\\u2819\\u280b\\u281b\\u2819\\u280b\\u281b\\u2819\\u280b\\u2803\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2820\\u283f\\u283b\\u281f\\u283f\\u2803\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2838\\u281f\\u283f\\u281f\\u283f\\u2806\\u2800\\u2838\\u283f\\u283f\\u281f\\u282f\\u2800\\u2800\\u2800\\u2838\\u283f\\u283f\\u283f\\u280f\\u2800\\u2800\\u2800\\u2800\\u2800\\u2808\\u2809\\u283b\\u283b\\u287f\\u28ff\\u28bf\\u287f\\u287f\\u283f\\u281b\\u2801\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\n//                    allo.gitcoin.co\\n\\n/// @title Errors\\n/// @author @thelostone-mc <aditya@gitcoin.co>, @KurtMerbeth <kurt@gitcoin.co>, @codenamejason <jason@gitcoin.co>\\n/// @notice Library containing all custom errors the protocol may revert with.\\ncontract Errors {\\n    /// ======================\\n    /// ====== Generic =======\\n    /// ======================\\n\\n    /// @notice Thrown as a general error when input / data is invalid\\n    error INVALID();\\n\\n    /// @notice Thrown when mismatch in decoding data\\n    error MISMATCH();\\n\\n    /// @notice Thrown when not enough funds are available\\n    error NOT_ENOUGH_FUNDS();\\n\\n    /// @notice Thrown when user is not authorized\\n    error UNAUTHORIZED();\\n\\n    /// @notice Thrown when address is the zero address\\n    error ZERO_ADDRESS();\\n\\n    /// @notice Thrown when the function is not implemented\\n    error NOT_IMPLEMENTED();\\n\\n    /// ======================\\n    /// ====== Registry ======\\n    /// ======================\\n\\n    /// @dev Thrown when the nonce passed has been used or not available\\n    error NONCE_NOT_AVAILABLE();\\n\\n    /// @dev Thrown when the 'msg.sender' is not the pending owner on ownership transfer\\n    error NOT_PENDING_OWNER();\\n\\n    /// @dev Thrown if the anchor creation fails\\n    error ANCHOR_ERROR();\\n\\n    /// ======================\\n    /// ======== Allo ========\\n    /// ======================\\n\\n    /// @notice Thrown when the strategy is not approved\\n    error NOT_APPROVED_STRATEGY();\\n\\n    /// @notice Thrown when the strategy is approved and should be cloned\\n    error IS_APPROVED_STRATEGY();\\n\\n    /// @notice Thrown when the fee is below 1e18 which is the fee percentage denominator\\n    error INVALID_FEE();\\n\\n    /// ======================\\n    /// ===== IStrategy ======\\n    /// ======================\\n\\n    /// @notice Thrown when data is already intialized\\n    error ALREADY_INITIALIZED();\\n\\n    /// @notice Thrown when data is yet to be initialized\\n    error NOT_INITIALIZED();\\n\\n    /// @notice Thrown when an invalid address is used\\n    error INVALID_ADDRESS();\\n\\n    /// @notice Thrown when a pool is inactive\\n    error POOL_INACTIVE();\\n\\n    /// @notice Thrown when a pool is already active\\n    error POOL_ACTIVE();\\n\\n    /// @notice Thrown when two arrays length are not equal\\n    error ARRAY_MISMATCH();\\n\\n    /// @notice Thrown when the registration is invalid.\\n    error INVALID_REGISTRATION();\\n\\n    /// @notice Thrown when the metadata is invalid.\\n    error INVALID_METADATA();\\n\\n    /// @notice Thrown when the recipient is not accepted.\\n    error RECIPIENT_NOT_ACCEPTED();\\n\\n    /// @notice Thrown when recipient is already accepted.\\n    error RECIPIENT_ALREADY_ACCEPTED();\\n\\n    /// @notice Thrown when registration is not active.\\n    error REGISTRATION_NOT_ACTIVE();\\n\\n    /// @notice Thrown when registration is active.\\n    error REGISTRATION_ACTIVE();\\n\\n    /// @notice Thrown when there is an error in recipient.\\n    error RECIPIENT_ERROR(address recipientId);\\n\\n    /// @notice Thrown when the allocation is not active.\\n    error ALLOCATION_NOT_ACTIVE();\\n\\n    /// @notice Thrown when the allocation is not ended.\\n    error ALLOCATION_NOT_ENDED();\\n\\n    /// @notice Thrown when the allocation is active.\\n    error ALLOCATION_ACTIVE();\\n}\\n\",\"keccak256\":\"0xab23c9c86be175f309dd8ac603d2ca07be961c8f5fee25174380499cf3c1caaa\",\"license\":\"AGPL-3.0-only\"},\"node_modules/allo-v2/contracts/core/libraries/Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.19;\\n\\n// \\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2880\\u28fe\\u28ff\\u28f7\\u2840\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28fc\\u28ff\\u28ff\\u28f7\\u28c4\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u28d7\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u286f\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\n// \\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2880\\u28ff\\u28ff\\u28ff\\u28ff\\u28f7\\u2840\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28fc\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u2844\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u28d7\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u286f\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\n// \\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u2844\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28f8\\u28ff\\u28ff\\u28ff\\u28bf\\u28ff\\u28ff\\u28ff\\u2840\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u28d7\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u286f\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\n// \\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2818\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28c4\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28f0\\u28ff\\u28ff\\u28ff\\u285f\\u2818\\u28ff\\u28ff\\u28ff\\u28f7\\u2840\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u28d7\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u286f\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\n// \\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28c0\\u28f4\\u28fe\\u28ff\\u28ff\\u28ff\\u28ff\\u28fe\\u283b\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u2846\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28a0\\u28ff\\u28ff\\u28ff\\u287f\\u2800\\u2800\\u2838\\u28ff\\u28ff\\u28ff\\u28e7\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u28d7\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u286f\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2880\\u28e0\\u28f4\\u28f4\\u28f6\\u28f6\\u28f6\\u28e6\\u28e6\\u28c0\\u2840\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\n// \\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28f4\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u287f\\u2803\\u2800\\u2819\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28a0\\u28ff\\u28ff\\u28ff\\u28ff\\u2801\\u2800\\u2800\\u2800\\u28bb\\u28ff\\u28ff\\u28ff\\u28e7\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u28d7\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u286f\\u2800\\u2800\\u2800\\u2800\\u28e0\\u28fe\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28f6\\u2840\\u2800\\u2800\\u2800\\u2800\\n// \\u2800\\u2800\\u2800\\u2800\\u2800\\u2880\\u28fe\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u287f\\u2801\\u2800\\u2800\\u2800\\u2818\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u287f\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2880\\u28fe\\u28ff\\u28ff\\u28ff\\u2803\\u2800\\u2800\\u2800\\u2800\\u2808\\u28bf\\u28ff\\u28ff\\u28ff\\u28c6\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u28d7\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u286f\\u2800\\u2800\\u2800\\u28f0\\u28ff\\u28ff\\u28ff\\u287f\\u280b\\u2801\\u2800\\u2800\\u2808\\u2818\\u2839\\u28ff\\u28ff\\u28ff\\u28ff\\u28c6\\u2800\\u2800\\u2800\\n// \\u2800\\u2800\\u2800\\u2800\\u2880\\u28fe\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u287f\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2808\\u28bf\\u28ff\\u28ff\\u28ff\\u2803\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28fe\\u28ff\\u28ff\\u28ff\\u280f\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2818\\u28ff\\u28ff\\u28ff\\u28ff\\u2844\\u2800\\u2800\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u28d7\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u286f\\u2800\\u2800\\u28b0\\u28ff\\u28ff\\u28ff\\u28ff\\u2801\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2818\\u28ff\\u28ff\\u28ff\\u28ff\\u2840\\u2800\\u2800\\n// \\u2800\\u2800\\u2800\\u28a0\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28df\\u2800\\u2840\\u2880\\u2800\\u2840\\u2880\\u2800\\u2840\\u2888\\u28bf\\u285f\\u2801\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28fc\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u2844\\u2800\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u28d7\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u286f\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u28d7\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28ff\\u28ff\\u28ff\\u28ff\\u2847\\u2800\\u2800\\n// \\u2800\\u2800\\u28e0\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u287f\\u280b\\u28bb\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28f7\\u28f6\\u28c4\\u2840\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28f8\\u28ff\\u28ff\\u28ff\\u287f\\u28bf\\u283f\\u283f\\u283f\\u283f\\u283f\\u283f\\u283f\\u283f\\u283f\\u28bf\\u28ff\\u28ff\\u28ff\\u28f7\\u2840\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u28d7\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u286f\\u2800\\u2800\\u2838\\u28ff\\u28ff\\u28ff\\u28f7\\u2840\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28a0\\u28ff\\u28ff\\u28ff\\u28ff\\u2802\\u2800\\u2800\\n// \\u2800\\u2800\\u2819\\u281b\\u283f\\u283b\\u283b\\u281b\\u2809\\u2800\\u2800\\u2808\\u28bf\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28f7\\u28c4\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28f0\\u28ff\\u28ff\\u28ff\\u28ff\\u2801\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28bf\\u28ff\\u28ff\\u28ff\\u28e7\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u28d7\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u286f\\u2800\\u2800\\u2800\\u28bb\\u28ff\\u28ff\\u28ff\\u28f7\\u28c0\\u2880\\u2800\\u2800\\u2800\\u2840\\u28f0\\u28fe\\u28ff\\u28ff\\u28ff\\u280f\\u2800\\u2800\\u2800\\n// \\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2808\\u281b\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u2844\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28b0\\u28ff\\u28ff\\u28ff\\u28ff\\u2803\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2818\\u28ff\\u28ff\\u28ff\\u28ff\\u28e7\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u28d7\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u286f\\u2800\\u2800\\u2800\\u2800\\u2839\\u28bf\\u28ff\\u28ff\\u28ff\\u28ff\\u28fe\\u28fe\\u28f7\\u28ff\\u28ff\\u28ff\\u28ff\\u287f\\u280b\\u2800\\u2800\\u2800\\u2800\\n// \\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2808\\u2819\\u2819\\u280b\\u281b\\u2819\\u280b\\u281b\\u2819\\u280b\\u281b\\u2819\\u280b\\u2803\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2820\\u283f\\u283b\\u281f\\u283f\\u2803\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2838\\u281f\\u283f\\u281f\\u283f\\u2806\\u2800\\u2838\\u283f\\u283f\\u281f\\u282f\\u2800\\u2800\\u2800\\u2838\\u283f\\u283f\\u283f\\u280f\\u2800\\u2800\\u2800\\u2800\\u2800\\u2808\\u2809\\u283b\\u283b\\u287f\\u28ff\\u28bf\\u287f\\u287f\\u283f\\u281b\\u2801\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\n//                    allo.gitcoin.co\\n\\n/// @title Metadata\\n/// @author @thelostone-mc <aditya@gitcoin.co>, @0xKurt <kurt@gitcoin.co>, @codenamejason <jason@gitcoin.co>, @0xZakk <zakk@gitcoin.co>, @nfrgosselin <nate@gitcoin.co>\\n/// @notice Metadata is used to define the metadata for the protocol that is used throughout the system.\\nstruct Metadata {\\n    /// @notice Protocol ID corresponding to a specific protocol (currently using IPFS = 1)\\n    uint256 protocol;\\n    /// @notice Pointer (hash) to fetch metadata for the specified protocol\\n    string pointer;\\n}\\n\",\"keccak256\":\"0x452a95a8762fafd51d36295138f7e14189cbaaca7274d6fd34a59ad57a442d44\",\"license\":\"AGPL-3.0-only\"},\"node_modules/allo-v2/contracts/core/libraries/Native.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.19;\\n\\n// \\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2880\\u28fe\\u28ff\\u28f7\\u2840\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28fc\\u28ff\\u28ff\\u28f7\\u28c4\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u28d7\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u286f\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\n// \\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2880\\u28ff\\u28ff\\u28ff\\u28ff\\u28f7\\u2840\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28fc\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u2844\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u28d7\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u286f\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\n// \\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u2844\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28f8\\u28ff\\u28ff\\u28ff\\u28bf\\u28ff\\u28ff\\u28ff\\u2840\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u28d7\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u286f\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\n// \\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2818\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28c4\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28f0\\u28ff\\u28ff\\u28ff\\u285f\\u2818\\u28ff\\u28ff\\u28ff\\u28f7\\u2840\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u28d7\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u286f\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\n// \\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28c0\\u28f4\\u28fe\\u28ff\\u28ff\\u28ff\\u28ff\\u28fe\\u283b\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u2846\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28a0\\u28ff\\u28ff\\u28ff\\u287f\\u2800\\u2800\\u2838\\u28ff\\u28ff\\u28ff\\u28e7\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u28d7\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u286f\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2880\\u28e0\\u28f4\\u28f4\\u28f6\\u28f6\\u28f6\\u28e6\\u28e6\\u28c0\\u2840\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\n// \\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28f4\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u287f\\u2803\\u2800\\u2819\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28a0\\u28ff\\u28ff\\u28ff\\u28ff\\u2801\\u2800\\u2800\\u2800\\u28bb\\u28ff\\u28ff\\u28ff\\u28e7\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u28d7\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u286f\\u2800\\u2800\\u2800\\u2800\\u28e0\\u28fe\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28f6\\u2840\\u2800\\u2800\\u2800\\u2800\\n// \\u2800\\u2800\\u2800\\u2800\\u2800\\u2880\\u28fe\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u287f\\u2801\\u2800\\u2800\\u2800\\u2818\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u287f\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2880\\u28fe\\u28ff\\u28ff\\u28ff\\u2803\\u2800\\u2800\\u2800\\u2800\\u2808\\u28bf\\u28ff\\u28ff\\u28ff\\u28c6\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u28d7\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u286f\\u2800\\u2800\\u2800\\u28f0\\u28ff\\u28ff\\u28ff\\u287f\\u280b\\u2801\\u2800\\u2800\\u2808\\u2818\\u2839\\u28ff\\u28ff\\u28ff\\u28ff\\u28c6\\u2800\\u2800\\u2800\\n// \\u2800\\u2800\\u2800\\u2800\\u2880\\u28fe\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u287f\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2808\\u28bf\\u28ff\\u28ff\\u28ff\\u2803\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28fe\\u28ff\\u28ff\\u28ff\\u280f\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2818\\u28ff\\u28ff\\u28ff\\u28ff\\u2844\\u2800\\u2800\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u28d7\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u286f\\u2800\\u2800\\u28b0\\u28ff\\u28ff\\u28ff\\u28ff\\u2801\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2818\\u28ff\\u28ff\\u28ff\\u28ff\\u2840\\u2800\\u2800\\n// \\u2800\\u2800\\u2800\\u28a0\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28df\\u2800\\u2840\\u2880\\u2800\\u2840\\u2880\\u2800\\u2840\\u2888\\u28bf\\u285f\\u2801\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28fc\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u2844\\u2800\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u28d7\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u286f\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u28d7\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28ff\\u28ff\\u28ff\\u28ff\\u2847\\u2800\\u2800\\n// \\u2800\\u2800\\u28e0\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u287f\\u280b\\u28bb\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28f7\\u28f6\\u28c4\\u2840\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28f8\\u28ff\\u28ff\\u28ff\\u287f\\u28bf\\u283f\\u283f\\u283f\\u283f\\u283f\\u283f\\u283f\\u283f\\u283f\\u28bf\\u28ff\\u28ff\\u28ff\\u28f7\\u2840\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u28d7\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u286f\\u2800\\u2800\\u2838\\u28ff\\u28ff\\u28ff\\u28f7\\u2840\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28a0\\u28ff\\u28ff\\u28ff\\u28ff\\u2802\\u2800\\u2800\\n// \\u2800\\u2800\\u2819\\u281b\\u283f\\u283b\\u283b\\u281b\\u2809\\u2800\\u2800\\u2808\\u28bf\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28f7\\u28c4\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28f0\\u28ff\\u28ff\\u28ff\\u28ff\\u2801\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28bf\\u28ff\\u28ff\\u28ff\\u28e7\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u28d7\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u286f\\u2800\\u2800\\u2800\\u28bb\\u28ff\\u28ff\\u28ff\\u28f7\\u28c0\\u2880\\u2800\\u2800\\u2800\\u2840\\u28f0\\u28fe\\u28ff\\u28ff\\u28ff\\u280f\\u2800\\u2800\\u2800\\n// \\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2808\\u281b\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u2844\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28b0\\u28ff\\u28ff\\u28ff\\u28ff\\u2803\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2818\\u28ff\\u28ff\\u28ff\\u28ff\\u28e7\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u28d7\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u286f\\u2800\\u2800\\u2800\\u2800\\u2839\\u28bf\\u28ff\\u28ff\\u28ff\\u28ff\\u28fe\\u28fe\\u28f7\\u28ff\\u28ff\\u28ff\\u28ff\\u287f\\u280b\\u2800\\u2800\\u2800\\u2800\\n// \\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2808\\u2819\\u2819\\u280b\\u281b\\u2819\\u280b\\u281b\\u2819\\u280b\\u281b\\u2819\\u280b\\u2803\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2820\\u283f\\u283b\\u281f\\u283f\\u2803\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2838\\u281f\\u283f\\u281f\\u283f\\u2806\\u2800\\u2838\\u283f\\u283f\\u281f\\u282f\\u2800\\u2800\\u2800\\u2838\\u283f\\u283f\\u283f\\u280f\\u2800\\u2800\\u2800\\u2800\\u2800\\u2808\\u2809\\u283b\\u283b\\u287f\\u28ff\\u28bf\\u287f\\u287f\\u283f\\u281b\\u2801\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\n//                    allo.gitcoin.co\\n\\n/// @title Native token information\\n/// @author @thelostone-mc <aditya@gitcoin.co>, @0xKurt <kurt@gitcoin.co>, @codenamejason <jason@gitcoin.co>, @0xZakk <zakk@gitcoin.co>, @nfrgosselin <nate@gitcoin.co>\\n/// @notice This is used to define the address of the native token for the protocol\\ncontract Native {\\n    /// @notice Address of the native token\\n    address public constant NATIVE = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n}\\n\",\"keccak256\":\"0x23dacace24a8c570a659dcc7e52fca2d39cc7577c6cfa674820cafaf194b29d5\",\"license\":\"AGPL-3.0-only\"},\"node_modules/allo-v2/contracts/core/libraries/Transfer.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.19;\\n\\n// External Libraries\\nimport {SafeTransferLib} from \\\"solady/src/utils/SafeTransferLib.sol\\\";\\n// Internal Libraries\\nimport \\\"./Native.sol\\\";\\n\\n// \\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2880\\u28fe\\u28ff\\u28f7\\u2840\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28fc\\u28ff\\u28ff\\u28f7\\u28c4\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u28d7\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u286f\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\n// \\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2880\\u28ff\\u28ff\\u28ff\\u28ff\\u28f7\\u2840\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28fc\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u2844\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u28d7\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u286f\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\n// \\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u2844\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28f8\\u28ff\\u28ff\\u28ff\\u28bf\\u28ff\\u28ff\\u28ff\\u2840\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u28d7\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u286f\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\n// \\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2818\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28c4\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28f0\\u28ff\\u28ff\\u28ff\\u285f\\u2818\\u28ff\\u28ff\\u28ff\\u28f7\\u2840\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u28d7\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u286f\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\n// \\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28c0\\u28f4\\u28fe\\u28ff\\u28ff\\u28ff\\u28ff\\u28fe\\u283b\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u2846\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28a0\\u28ff\\u28ff\\u28ff\\u287f\\u2800\\u2800\\u2838\\u28ff\\u28ff\\u28ff\\u28e7\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u28d7\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u286f\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2880\\u28e0\\u28f4\\u28f4\\u28f6\\u28f6\\u28f6\\u28e6\\u28e6\\u28c0\\u2840\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\n// \\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28f4\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u287f\\u2803\\u2800\\u2819\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28a0\\u28ff\\u28ff\\u28ff\\u28ff\\u2801\\u2800\\u2800\\u2800\\u28bb\\u28ff\\u28ff\\u28ff\\u28e7\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u28d7\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u286f\\u2800\\u2800\\u2800\\u2800\\u28e0\\u28fe\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28f6\\u2840\\u2800\\u2800\\u2800\\u2800\\n// \\u2800\\u2800\\u2800\\u2800\\u2800\\u2880\\u28fe\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u287f\\u2801\\u2800\\u2800\\u2800\\u2818\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u287f\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2880\\u28fe\\u28ff\\u28ff\\u28ff\\u2803\\u2800\\u2800\\u2800\\u2800\\u2808\\u28bf\\u28ff\\u28ff\\u28ff\\u28c6\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u28d7\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u286f\\u2800\\u2800\\u2800\\u28f0\\u28ff\\u28ff\\u28ff\\u287f\\u280b\\u2801\\u2800\\u2800\\u2808\\u2818\\u2839\\u28ff\\u28ff\\u28ff\\u28ff\\u28c6\\u2800\\u2800\\u2800\\n// \\u2800\\u2800\\u2800\\u2800\\u2880\\u28fe\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u287f\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2808\\u28bf\\u28ff\\u28ff\\u28ff\\u2803\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28fe\\u28ff\\u28ff\\u28ff\\u280f\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2818\\u28ff\\u28ff\\u28ff\\u28ff\\u2844\\u2800\\u2800\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u28d7\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u286f\\u2800\\u2800\\u28b0\\u28ff\\u28ff\\u28ff\\u28ff\\u2801\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2818\\u28ff\\u28ff\\u28ff\\u28ff\\u2840\\u2800\\u2800\\n// \\u2800\\u2800\\u2800\\u28a0\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28df\\u2800\\u2840\\u2880\\u2800\\u2840\\u2880\\u2800\\u2840\\u2888\\u28bf\\u285f\\u2801\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28fc\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u2844\\u2800\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u28d7\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u286f\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u28d7\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28ff\\u28ff\\u28ff\\u28ff\\u2847\\u2800\\u2800\\n// \\u2800\\u2800\\u28e0\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u287f\\u280b\\u28bb\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28f7\\u28f6\\u28c4\\u2840\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28f8\\u28ff\\u28ff\\u28ff\\u287f\\u28bf\\u283f\\u283f\\u283f\\u283f\\u283f\\u283f\\u283f\\u283f\\u283f\\u28bf\\u28ff\\u28ff\\u28ff\\u28f7\\u2840\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u28d7\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u286f\\u2800\\u2800\\u2838\\u28ff\\u28ff\\u28ff\\u28f7\\u2840\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28a0\\u28ff\\u28ff\\u28ff\\u28ff\\u2802\\u2800\\u2800\\n// \\u2800\\u2800\\u2819\\u281b\\u283f\\u283b\\u283b\\u281b\\u2809\\u2800\\u2800\\u2808\\u28bf\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28f7\\u28c4\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28f0\\u28ff\\u28ff\\u28ff\\u28ff\\u2801\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28bf\\u28ff\\u28ff\\u28ff\\u28e7\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u28d7\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u286f\\u2800\\u2800\\u2800\\u28bb\\u28ff\\u28ff\\u28ff\\u28f7\\u28c0\\u2880\\u2800\\u2800\\u2800\\u2840\\u28f0\\u28fe\\u28ff\\u28ff\\u28ff\\u280f\\u2800\\u2800\\u2800\\n// \\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2808\\u281b\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u28ff\\u2844\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28b0\\u28ff\\u28ff\\u28ff\\u28ff\\u2803\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2818\\u28ff\\u28ff\\u28ff\\u28ff\\u28e7\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u28d7\\u2800\\u2800\\u2800\\u28b8\\u28ff\\u28ff\\u28ff\\u286f\\u2800\\u2800\\u2800\\u2800\\u2839\\u28bf\\u28ff\\u28ff\\u28ff\\u28ff\\u28fe\\u28fe\\u28f7\\u28ff\\u28ff\\u28ff\\u28ff\\u287f\\u280b\\u2800\\u2800\\u2800\\u2800\\n// \\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2808\\u2819\\u2819\\u280b\\u281b\\u2819\\u280b\\u281b\\u2819\\u280b\\u281b\\u2819\\u280b\\u2803\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2820\\u283f\\u283b\\u281f\\u283f\\u2803\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2838\\u281f\\u283f\\u281f\\u283f\\u2806\\u2800\\u2838\\u283f\\u283f\\u281f\\u282f\\u2800\\u2800\\u2800\\u2838\\u283f\\u283f\\u283f\\u280f\\u2800\\u2800\\u2800\\u2800\\u2800\\u2808\\u2809\\u283b\\u283b\\u287f\\u28ff\\u28bf\\u287f\\u287f\\u283f\\u281b\\u2801\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\n//                    allo.gitcoin.co\\n\\n/// @title Transfer contract\\n/// @author @thelostone-mc <aditya@gitcoin.co>, @0xKurt <kurt@gitcoin.co>, @codenamejason <jason@gitcoin.co>, @0xZakk <zakk@gitcoin.co>, @nfrgosselin <nate@gitcoin.co>\\n/// @notice A helper contract to transfer tokens within Allo protocol\\n/// @dev Handles the transfer of tokens to an address\\ncontract Transfer is Native {\\n    /// @notice Thrown when the amount of tokens sent does not match the amount of tokens expected\\n    error AMOUNT_MISMATCH();\\n\\n    /// @notice This holds the details for a transfer\\n    struct TransferData {\\n        address from;\\n        address to;\\n        uint256 amount;\\n    }\\n\\n    /// @notice Transfer an amount of a token to an array of addresses\\n    /// @param _token The address of the token\\n    /// @param _transferData TransferData[]\\n    /// @return Whether the transfer was successful or not\\n    function _transferAmountsFrom(address _token, TransferData[] memory _transferData) internal returns (bool) {\\n        uint256 msgValue = msg.value;\\n\\n        for (uint256 i; i < _transferData.length;) {\\n            TransferData memory transferData = _transferData[i];\\n\\n            if (_token == NATIVE) {\\n                msgValue -= transferData.amount;\\n                SafeTransferLib.safeTransferETH(transferData.to, transferData.amount);\\n            } else {\\n                SafeTransferLib.safeTransferFrom(_token, transferData.from, transferData.to, transferData.amount);\\n            }\\n\\n            unchecked {\\n                i++;\\n            }\\n        }\\n\\n        if (msgValue != 0) revert AMOUNT_MISMATCH();\\n\\n        return true;\\n    }\\n\\n    /// @notice Transfer an amount of a token to an address\\n    /// @param _token The address of the token\\n    /// @param _transferData Individual TransferData\\n    /// @return Whether the transfer was successful or not\\n    function _transferAmountFrom(address _token, TransferData memory _transferData) internal returns (bool) {\\n        uint256 amount = _transferData.amount;\\n        if (_token == NATIVE) {\\n            // Native Token\\n            if (msg.value < amount) revert AMOUNT_MISMATCH();\\n\\n            SafeTransferLib.safeTransferETH(_transferData.to, amount);\\n        } else {\\n            SafeTransferLib.safeTransferFrom(_token, _transferData.from, _transferData.to, amount);\\n        }\\n        return true;\\n    }\\n\\n    /// @notice Transfer an amount of a token to an address\\n    /// @param _token The token to transfer\\n    /// @param _to The address to transfer to\\n    /// @param _amount The amount to transfer\\n    function _transferAmount(address _token, address _to, uint256 _amount) internal {\\n        if (_token == NATIVE) {\\n            SafeTransferLib.safeTransferETH(_to, _amount);\\n        } else {\\n            SafeTransferLib.safeTransfer(_token, _to, _amount);\\n        }\\n    }\\n\\n    /// @notice Get the balance of a token for an account\\n    /// @param _token The token to get the balance of\\n    /// @param _account The account to get the balance for\\n    /// @return The balance of the token for the account\\n    function _getBalance(address _token, address _account) internal view returns (uint256) {\\n        if (_token == NATIVE) {\\n            return payable(_account).balance;\\n        } else {\\n            return SafeTransferLib.balanceOf(_token, _account);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb7b2bb9e47965ba74753f58544fe5f168a28970798720675ca7ba97fb0c79286\",\"license\":\"AGPL-3.0-only\"},\"solady/src/utils/SafeTransferLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/// @notice Safe ETH and ERC20 transfer library that gracefully handles missing return values.\\n/// @author Solady (https://github.com/vectorized/solady/blob/main/src/utils/SafeTransferLib.sol)\\n/// @author Modified from Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/SafeTransferLib.sol)\\n///\\n/// @dev Note:\\n/// - For ETH transfers, please use `forceSafeTransferETH` for gas griefing protection.\\n/// - For ERC20s, this implementation won't check that a token has code,\\n/// responsibility is delegated to the caller.\\nlibrary SafeTransferLib {\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                       CUSTOM ERRORS                        */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev The ETH transfer has failed.\\n    error ETHTransferFailed();\\n\\n    /// @dev The ERC20 `transferFrom` has failed.\\n    error TransferFromFailed();\\n\\n    /// @dev The ERC20 `transfer` has failed.\\n    error TransferFailed();\\n\\n    /// @dev The ERC20 `approve` has failed.\\n    error ApproveFailed();\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                         CONSTANTS                          */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Suggested gas stipend for contract receiving ETH\\n    /// that disallows any storage writes.\\n    uint256 internal constant GAS_STIPEND_NO_STORAGE_WRITES = 2300;\\n\\n    /// @dev Suggested gas stipend for contract receiving ETH to perform a few\\n    /// storage reads and writes, but low enough to prevent griefing.\\n    /// Multiply by a small constant (e.g. 2), if needed.\\n    uint256 internal constant GAS_STIPEND_NO_GRIEF = 100000;\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                       ETH OPERATIONS                       */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Sends `amount` (in wei) ETH to `to`.\\n    /// Reverts upon failure.\\n    ///\\n    /// Note: This implementation does NOT protect against gas griefing.\\n    /// Please use `forceSafeTransferETH` for gas griefing protection.\\n    function safeTransferETH(address to, uint256 amount) internal {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Transfer the ETH and check if it succeeded or not.\\n            if iszero(call(gas(), to, amount, 0x00, 0x00, 0x00, 0x00)) {\\n                // Store the function selector of `ETHTransferFailed()`.\\n                mstore(0x00, 0xb12d13eb)\\n                // Revert with (offset, size).\\n                revert(0x1c, 0x04)\\n            }\\n        }\\n    }\\n\\n    /// @dev Force sends `amount` (in wei) ETH to `to`, with a `gasStipend`.\\n    /// The `gasStipend` can be set to a low enough value to prevent\\n    /// storage writes or gas griefing.\\n    ///\\n    /// If sending via the normal procedure fails, force sends the ETH by\\n    /// creating a temporary contract which uses `SELFDESTRUCT` to force send the ETH.\\n    ///\\n    /// Reverts if the current contract has insufficient balance.\\n    function forceSafeTransferETH(address to, uint256 amount, uint256 gasStipend) internal {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // If insufficient balance, revert.\\n            if lt(selfbalance(), amount) {\\n                // Store the function selector of `ETHTransferFailed()`.\\n                mstore(0x00, 0xb12d13eb)\\n                // Revert with (offset, size).\\n                revert(0x1c, 0x04)\\n            }\\n            // Transfer the ETH and check if it succeeded or not.\\n            if iszero(call(gasStipend, to, amount, 0x00, 0x00, 0x00, 0x00)) {\\n                mstore(0x00, to) // Store the address in scratch space.\\n                mstore8(0x0b, 0x73) // Opcode `PUSH20`.\\n                mstore8(0x20, 0xff) // Opcode `SELFDESTRUCT`.\\n                // We can directly use `SELFDESTRUCT` in the contract creation.\\n                // Compatible with `SENDALL`: https://eips.ethereum.org/EIPS/eip-4758\\n                if iszero(create(amount, 0x0b, 0x16)) {\\n                    // To coerce gas estimation to provide enough gas for the `create` above.\\n                    if iszero(gt(gas(), 1000000)) { revert(0x00, 0x00) }\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @dev Force sends `amount` (in wei) ETH to `to`, with a gas stipend\\n    /// equal to `GAS_STIPEND_NO_GRIEF`. This gas stipend is a reasonable default\\n    /// for 99% of cases and can be overridden with the three-argument version of this\\n    /// function if necessary.\\n    ///\\n    /// If sending via the normal procedure fails, force sends the ETH by\\n    /// creating a temporary contract which uses `SELFDESTRUCT` to force send the ETH.\\n    ///\\n    /// Reverts if the current contract has insufficient balance.\\n    function forceSafeTransferETH(address to, uint256 amount) internal {\\n        // Manually inlined because the compiler doesn't inline functions with branches.\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // If insufficient balance, revert.\\n            if lt(selfbalance(), amount) {\\n                // Store the function selector of `ETHTransferFailed()`.\\n                mstore(0x00, 0xb12d13eb)\\n                // Revert with (offset, size).\\n                revert(0x1c, 0x04)\\n            }\\n            // Transfer the ETH and check if it succeeded or not.\\n            if iszero(call(GAS_STIPEND_NO_GRIEF, to, amount, 0x00, 0x00, 0x00, 0x00)) {\\n                mstore(0x00, to) // Store the address in scratch space.\\n                mstore8(0x0b, 0x73) // Opcode `PUSH20`.\\n                mstore8(0x20, 0xff) // Opcode `SELFDESTRUCT`.\\n                // We can directly use `SELFDESTRUCT` in the contract creation.\\n                // Compatible with `SENDALL`: https://eips.ethereum.org/EIPS/eip-4758\\n                if iszero(create(amount, 0x0b, 0x16)) {\\n                    // To coerce gas estimation to provide enough gas for the `create` above.\\n                    if iszero(gt(gas(), 1000000)) { revert(0x00, 0x00) }\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @dev Sends `amount` (in wei) ETH to `to`, with a `gasStipend`.\\n    /// The `gasStipend` can be set to a low enough value to prevent\\n    /// storage writes or gas griefing.\\n    ///\\n    /// Simply use `gasleft()` for `gasStipend` if you don't need a gas stipend.\\n    ///\\n    /// Note: Does NOT revert upon failure.\\n    /// Returns whether the transfer of ETH is successful instead.\\n    function trySafeTransferETH(address to, uint256 amount, uint256 gasStipend)\\n        internal\\n        returns (bool success)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Transfer the ETH and check if it succeeded or not.\\n            success := call(gasStipend, to, amount, 0x00, 0x00, 0x00, 0x00)\\n        }\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                      ERC20 OPERATIONS                      */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Sends `amount` of ERC20 `token` from `from` to `to`.\\n    /// Reverts upon failure.\\n    ///\\n    /// The `from` account must have at least `amount` approved for\\n    /// the current contract to manage.\\n    function safeTransferFrom(address token, address from, address to, uint256 amount) internal {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let m := mload(0x40) // Cache the free memory pointer.\\n\\n            mstore(0x60, amount) // Store the `amount` argument.\\n            mstore(0x40, to) // Store the `to` argument.\\n            mstore(0x2c, shl(96, from)) // Store the `from` argument.\\n            // Store the function selector of `transferFrom(address,address,uint256)`.\\n            mstore(0x0c, 0x23b872dd000000000000000000000000)\\n\\n            if iszero(\\n                and( // The arguments of `and` are evaluated from right to left.\\n                    // Set success to whether the call reverted, if not we check it either\\n                    // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                    or(eq(mload(0x00), 1), iszero(returndatasize())),\\n                    call(gas(), token, 0, 0x1c, 0x64, 0x00, 0x20)\\n                )\\n            ) {\\n                // Store the function selector of `TransferFromFailed()`.\\n                mstore(0x00, 0x7939f424)\\n                // Revert with (offset, size).\\n                revert(0x1c, 0x04)\\n            }\\n\\n            mstore(0x60, 0) // Restore the zero slot to zero.\\n            mstore(0x40, m) // Restore the free memory pointer.\\n        }\\n    }\\n\\n    /// @dev Sends all of ERC20 `token` from `from` to `to`.\\n    /// Reverts upon failure.\\n    ///\\n    /// The `from` account must have their entire balance approved for\\n    /// the current contract to manage.\\n    function safeTransferAllFrom(address token, address from, address to)\\n        internal\\n        returns (uint256 amount)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let m := mload(0x40) // Cache the free memory pointer.\\n\\n            mstore(0x40, to) // Store the `to` argument.\\n            mstore(0x2c, shl(96, from)) // Store the `from` argument.\\n            // Store the function selector of `balanceOf(address)`.\\n            mstore(0x0c, 0x70a08231000000000000000000000000)\\n            if iszero(\\n                and( // The arguments of `and` are evaluated from right to left.\\n                    gt(returndatasize(), 0x1f), // At least 32 bytes returned.\\n                    staticcall(gas(), token, 0x1c, 0x24, 0x60, 0x20)\\n                )\\n            ) {\\n                // Store the function selector of `TransferFromFailed()`.\\n                mstore(0x00, 0x7939f424)\\n                // Revert with (offset, size).\\n                revert(0x1c, 0x04)\\n            }\\n\\n            // Store the function selector of `transferFrom(address,address,uint256)`.\\n            mstore(0x00, 0x23b872dd)\\n            // The `amount` is already at 0x60. Load it for the function's return value.\\n            amount := mload(0x60)\\n\\n            if iszero(\\n                and( // The arguments of `and` are evaluated from right to left.\\n                    // Set success to whether the call reverted, if not we check it either\\n                    // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                    or(eq(mload(0x00), 1), iszero(returndatasize())),\\n                    call(gas(), token, 0, 0x1c, 0x64, 0x00, 0x20)\\n                )\\n            ) {\\n                // Store the function selector of `TransferFromFailed()`.\\n                mstore(0x00, 0x7939f424)\\n                // Revert with (offset, size).\\n                revert(0x1c, 0x04)\\n            }\\n\\n            mstore(0x60, 0) // Restore the zero slot to zero.\\n            mstore(0x40, m) // Restore the free memory pointer.\\n        }\\n    }\\n\\n    /// @dev Sends `amount` of ERC20 `token` from the current contract to `to`.\\n    /// Reverts upon failure.\\n    function safeTransfer(address token, address to, uint256 amount) internal {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x14, to) // Store the `to` argument.\\n            mstore(0x34, amount) // Store the `amount` argument.\\n            // Store the function selector of `transfer(address,uint256)`.\\n            mstore(0x00, 0xa9059cbb000000000000000000000000)\\n\\n            if iszero(\\n                and( // The arguments of `and` are evaluated from right to left.\\n                    // Set success to whether the call reverted, if not we check it either\\n                    // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                    or(eq(mload(0x00), 1), iszero(returndatasize())),\\n                    call(gas(), token, 0, 0x10, 0x44, 0x00, 0x20)\\n                )\\n            ) {\\n                // Store the function selector of `TransferFailed()`.\\n                mstore(0x00, 0x90b8ec18)\\n                // Revert with (offset, size).\\n                revert(0x1c, 0x04)\\n            }\\n            // Restore the part of the free memory pointer that was overwritten.\\n            mstore(0x34, 0)\\n        }\\n    }\\n\\n    /// @dev Sends all of ERC20 `token` from the current contract to `to`.\\n    /// Reverts upon failure.\\n    function safeTransferAll(address token, address to) internal returns (uint256 amount) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, 0x70a08231) // Store the function selector of `balanceOf(address)`.\\n            mstore(0x20, address()) // Store the address of the current contract.\\n            if iszero(\\n                and( // The arguments of `and` are evaluated from right to left.\\n                    gt(returndatasize(), 0x1f), // At least 32 bytes returned.\\n                    staticcall(gas(), token, 0x1c, 0x24, 0x34, 0x20)\\n                )\\n            ) {\\n                // Store the function selector of `TransferFailed()`.\\n                mstore(0x00, 0x90b8ec18)\\n                // Revert with (offset, size).\\n                revert(0x1c, 0x04)\\n            }\\n\\n            mstore(0x14, to) // Store the `to` argument.\\n            // The `amount` is already at 0x34. Load it for the function's return value.\\n            amount := mload(0x34)\\n            // Store the function selector of `transfer(address,uint256)`.\\n            mstore(0x00, 0xa9059cbb000000000000000000000000)\\n\\n            if iszero(\\n                and( // The arguments of `and` are evaluated from right to left.\\n                    // Set success to whether the call reverted, if not we check it either\\n                    // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                    or(eq(mload(0x00), 1), iszero(returndatasize())),\\n                    call(gas(), token, 0, 0x10, 0x44, 0x00, 0x20)\\n                )\\n            ) {\\n                // Store the function selector of `TransferFailed()`.\\n                mstore(0x00, 0x90b8ec18)\\n                // Revert with (offset, size).\\n                revert(0x1c, 0x04)\\n            }\\n            // Restore the part of the free memory pointer that was overwritten.\\n            mstore(0x34, 0)\\n        }\\n    }\\n\\n    /// @dev Sets `amount` of ERC20 `token` for `to` to manage on behalf of the current contract.\\n    /// Reverts upon failure.\\n    function safeApprove(address token, address to, uint256 amount) internal {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x14, to) // Store the `to` argument.\\n            mstore(0x34, amount) // Store the `amount` argument.\\n            // Store the function selector of `approve(address,uint256)`.\\n            mstore(0x00, 0x095ea7b3000000000000000000000000)\\n\\n            if iszero(\\n                and( // The arguments of `and` are evaluated from right to left.\\n                    // Set success to whether the call reverted, if not we check it either\\n                    // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                    or(eq(mload(0x00), 1), iszero(returndatasize())),\\n                    call(gas(), token, 0, 0x10, 0x44, 0x00, 0x20)\\n                )\\n            ) {\\n                // Store the function selector of `ApproveFailed()`.\\n                mstore(0x00, 0x3e3f8f73)\\n                // Revert with (offset, size).\\n                revert(0x1c, 0x04)\\n            }\\n            // Restore the part of the free memory pointer that was overwritten.\\n            mstore(0x34, 0)\\n        }\\n    }\\n\\n    /// @dev Sets `amount` of ERC20 `token` for `to` to manage on behalf of the current contract.\\n    /// If the initial attempt to approve fails, attempts to reset the approved amount to zero,\\n    /// then retries the approval again (some tokens, e.g. USDT, requires this).\\n    /// Reverts upon failure.\\n    function safeApproveWithRetry(address token, address to, uint256 amount) internal {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x14, to) // Store the `to` argument.\\n            mstore(0x34, amount) // Store the `amount` argument.\\n            // Store the function selector of `approve(address,uint256)`.\\n            mstore(0x00, 0x095ea7b3000000000000000000000000)\\n\\n            if iszero(\\n                and( // The arguments of `and` are evaluated from right to left.\\n                    // Set success to whether the call reverted, if not we check it either\\n                    // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                    or(eq(mload(0x00), 1), iszero(returndatasize())),\\n                    call(gas(), token, 0, 0x10, 0x44, 0x00, 0x20)\\n                )\\n            ) {\\n                mstore(0x34, 0) // Store 0 for the `amount`.\\n                mstore(0x00, 0x095ea7b3000000000000000000000000) // Store the function selector.\\n                // We can ignore the result of this call. Just need to check the next call.\\n                pop(call(gas(), token, 0, 0x10, 0x44, 0x00, 0x00))\\n                mstore(0x34, amount) // Store back the original `amount`.\\n\\n                if iszero(\\n                    and(\\n                        or(eq(mload(0x00), 1), iszero(returndatasize())),\\n                        call(gas(), token, 0, 0x10, 0x44, 0x00, 0x20)\\n                    )\\n                ) {\\n                    // Store the function selector of `ApproveFailed()`.\\n                    mstore(0x00, 0x3e3f8f73)\\n                    // Revert with (offset, size).\\n                    revert(0x1c, 0x04)\\n                }\\n            }\\n            // Restore the part of the free memory pointer that was overwritten.\\n            mstore(0x34, 0)\\n        }\\n    }\\n\\n    /// @dev Returns the amount of ERC20 `token` owned by `account`.\\n    /// Returns zero if the `token` does not exist.\\n    function balanceOf(address token, address account) internal view returns (uint256 amount) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x14, account) // Store the `account` argument.\\n            // Store the function selector of `balanceOf(address)`.\\n            mstore(0x00, 0x70a08231000000000000000000000000)\\n            amount :=\\n                mul(\\n                    mload(0x20),\\n                    and( // The arguments of `and` are evaluated from right to left.\\n                        gt(returndatasize(), 0x1f), // At least 32 bytes returned.\\n                        staticcall(gas(), token, 0x10, 0x24, 0x20, 0x20)\\n                    )\\n                )\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x06d3261d13cf5a08f9bcda05e17be0a6a0380193116298fdf8eabf9bf80d3624\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b50604051620026db380380620026db8339810160408190526200003491620000ba565b6001600160a01b038216608052604051829082906200005890829060200162000195565b60408051601f19818403018152919052805160209091012060a05250620001ca92505050565b634e487b7160e01b600052604160045260246000fd5b60005b83811015620000b157818101518382015260200162000097565b50506000910152565b60008060408385031215620000ce57600080fd5b82516001600160a01b0381168114620000e657600080fd5b60208401519092506001600160401b03808211156200010457600080fd5b818501915085601f8301126200011957600080fd5b8151818111156200012e576200012e6200007e565b604051601f8201601f19908116603f011681019083821181831017156200015957620001596200007e565b816040528281528860208487010111156200017357600080fd5b6200018683602083016020880162000094565b80955050505050509250929050565b6020815260008251806020840152620001b681604085016020870162000094565b601f01601f19169190910160400192915050565b60805160a0516124d66200020560003960006102da0152600081816102360152818161097b01528181610a9f015261158e01526124d66000f3fe6080604052600436106101d15760003560e01c806395355b3b116100f7578063df868ed311610095578063ef2920fc11610064578063ef2920fc14610594578063f199f56d146105a7578063f5b0dfb7146105bd578063f7cb789a146105dd57600080fd5b8063df868ed3146104fe578063eb11af9314610516578063eb82031214610543578063edd146cc1461057457600080fd5b8063a93d49fe116100d1578063a93d49fe1461047b578063b2b878d01461049b578063bcda201e146104c8578063dd4f8f74146104de57600080fd5b806395355b3b1461041d5780639fae179014610433578063a0cf0aea1461045357600080fd5b806342fda9c71161016f5780634e2786fb1161013e5780634e2786fb146103635780635c560f49146103a257806362812a39146103da57806363b51ac01461040757600080fd5b806342fda9c7146102cb57806347ccca02146102fe5780634ab4ba421461031e5780634d31d0871461033357600080fd5b80631db9ae5b116101ab5780631db9ae5b1461026e5780631e6dc9dc146102835780632bbe0cae146102a357806338fff2d0146102b657600080fd5b80630a6f0ee9146101dd5780630f0e1359146101ff57806315cc481e1461022757600080fd5b366101d857005b600080fd5b3480156101e957600080fd5b506101fd6101f8366004611b0b565b610604565b005b34801561020b57600080fd5b50610214610624565b6040519081526020015b60405180910390f35b34801561023357600080fd5b507f00000000000000000000000000000000000000000000000000000000000000005b6040516001600160a01b03909116815260200161021e565b34801561027a57600080fd5b50610214610635565b34801561028f57600080fd5b5061021461029e366004611b82565b610641565b6102566102b1366004611ba4565b610662565b3480156102c257600080fd5b50600154610214565b3480156102d757600080fd5b507f0000000000000000000000000000000000000000000000000000000000000000610214565b34801561030a57600080fd5b50600954610256906001600160a01b031681565b34801561032a57600080fd5b50600254610214565b34801561033f57600080fd5b5061035361034e366004611bf5565b610685565b604051901515815260200161021e565b34801561036f57600080fd5b50600e5461038a90600160801b90046001600160401b031681565b6040516001600160401b03909116815260200161021e565b3480156103ae57600080fd5b506102146103bd366004611b82565b600860209081526000928352604080842090915290825290205481565b3480156103e657600080fd5b506103fa6103f5366004611bf5565b610690565b60405161021e9190611cc1565b34801561041357600080fd5b50610214600c5481565b34801561042957600080fd5b50610214600b5481565b34801561043f57600080fd5b506103fa61044e366004611d22565b6106a1565b34801561045f57600080fd5b5061025673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee81565b34801561048757600080fd5b506103fa610496366004611d22565b6106bc565b3480156104a757600080fd5b506104bb6104b6366004611d3b565b6106d2565b60405161021e9190611e0f565b3480156104d457600080fd5b50610214600a5481565b3480156104ea57600080fd5b50600e5461038a906001600160401b031681565b34801561050a57600080fd5b5060005460ff16610353565b34801561052257600080fd5b50610536610531366004611bf5565b6107d0565b60405161021e9190611e67565b34801561054f57600080fd5b5061056361055e366004611bf5565b6107db565b60405161021e959493929190611e75565b34801561058057600080fd5b506101fd61058f366004611ebb565b6108c0565b6101fd6105a2366004611ba4565b610928565b3480156105b357600080fd5b50610214600d5481565b3480156105c957600080fd5b506101fd6105d8366004611d22565b610946565b3480156105e957600080fd5b50600e5461038a90600160401b90046001600160401b031681565b61060c610970565b6106146109bb565b61061f8383836109de565b505050565b60006106306006610bff565b905090565b60006106306004610bff565b60008281526008602090815260408083208484529091529020545b92915050565b600061066c610970565b6106746109bb565b61067e8383610c09565b905061065c565b600061065c82610e59565b610698611926565b61065c82610ed2565b6106a9611926565b61065c6106b7600484611005565b610ed2565b6106c4611926565b61065c6106b7600684611005565b815181516060919081146106f957604051633da4c02b60e11b815260040160405180910390fd5b6000816001600160401b0381111561071357610713611979565b60405190808252806020026020018201604052801561075857816020015b60408051808201909152600080825260208201528152602001906001900390816107315790505b50905060005b828110156107c7576107a286828151811061077b5761077b611f01565b602002602001015186838151811061079557610795611f01565b6020026020010151611018565b8282815181106107b4576107b4611f01565b602090810291909101015260010161075e565b50949350505050565b600061065c8261109c565b6003602090815260009182526040918290208054835180850190945260018201805485526002830180546001600160a01b0390931695939491929184019161082290611f17565b80601f016020809104026020016040519081016040528092919081815260200182805461084e90611f17565b801561089b5780601f106108705761010080835404028352916020019161089b565b820191906000526020600020905b81548152906001019060200180831161087e57829003601f168201915b5050509190925250505060038201546004830154600590930154919260ff9091169185565b6108c8610970565b6000818060200190518101906108de9190611f6d565b90506108ea83826110b1565b7f91efa3d50feccde0d0d202f8ae5c41ca0b2be614cebcb2bd2f4b019396e6568a838360405161091b929190611ff1565b60405180910390a1505050565b610930610970565b6109386109bb565b6109428282611107565b5050565b61094e610970565b80600260008282546109609190612020565b9091555061096d90508181565b50565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146109b95760405163075fd2b160e01b815260040160405180910390fd5b565b6001546000036109b957604051630f68fe6360e21b815260040160405180910390fd5b6109e6611332565b6109ee611379565b60006109fa6004610bff565b905060005b81811015610bb3576000610a14600483611005565b6001600160a01b03811660009081526003602090815260408083208151928301909152828252929350610a48908490611018565b60208101519091506000819003610a825760405163f4a513b960e01b81526001600160a01b03851660048201526024015b60405180910390fd5b60015460405163068bcd8d60e01b81526000916001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169163068bcd8d91610ad69160040190815260200190565b600060405180830381865afa158015610af3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610b1b91908101906120dd565b60408101518554919250610b38916001600160a01b03168461152a565b81846005016000828254610b4c9190612020565b90915550508354604080516001600160a01b039283168152602081018590528a8316818301529051918716917fb5b51454adfa840bd593658325a60a50b0216f12eb5d2937efe6cea935675b7d9181900360600190a25050600190930192506109ff915050565b50600e8054600160801b90046001600160401b0316906010610bd483612190565b91906101000a8154816001600160401b0302191690836001600160401b031602179055505050505050565b600061065c825490565b600081610c1581611564565b60008060008087806020019051810190610c2f91906121b6565b929650909450925090506001600160a01b0384161580610c5657506001600160a01b038316155b15610c7f5760405163f4a513b960e01b81526001600160a01b0385166004820152602401610a79565b6001600160a01b03841660009081526003602052604090206002600382015460ff166006811115610cb257610cb2611c89565b14158015610cd157506002836006811115610ccf57610ccf611c89565b145b15610cfd57600b8054906000610ce683612231565b90915550610cf79050600486611616565b50610d80565b6002600382015460ff166006811115610d1857610d18611c89565b148015610d3657506003836006811115610d3457610d34611c89565b145b15610d5c57600b8054906000610d4b8361224a565b90915550610cf7905060048661162b565b60405163f4a513b960e01b81526001600160a01b0386166004820152602401610a79565b600a54600b541115610da557604051631d28b78560e11b815260040160405180910390fd5b80546001600160a01b0319166001600160a01b03851617815581516001820190815560208301518391906002840190610dde90826122af565b50505060038101805484919060ff19166001836006811115610e0257610e02611c89565b0217905550846001600160a01b03167fa197306e3dd5494a61a695381aa809a53b8e377a685e84e404a85d5a8da6cc628a8a604051610e4292919061236e565b60405180910390a2509294505050505b5092915050565b6009546040516370a0823160e01b81526001600160a01b03838116600483015260009283929116906370a0823190602401602060405180830381865afa158015610ea7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ecb9190612398565b1192915050565b610eda611926565b6001600160a01b03808316600090815260036020908152604091829020825160a081018452815490941684528251808401909352600181018054845260028201805492948685019490939084019190610f3290611f17565b80601f0160208091040260200160405190810160405280929190818152602001828054610f5e90611f17565b8015610fab5780601f10610f8057610100808354040283529160200191610fab565b820191906000526020600020905b815481529060010190602001808311610f8e57829003601f168201915b505050919092525050508152600382015460209091019060ff166006811115610fd657610fd6611c89565b6006811115610fe757610fe7611c89565b81526004820154602082015260059091015460409091015292915050565b60006110118383611640565b9392505050565b60408051808201909152600080825260208201526001600160a01b03831660009081526003602052604081206004810154600c549192909161105b576000611076565b600c548260025461106c91906123b1565b61107691906123c8565b6040805180820190915293546001600160a01b0316845260208401525090949350505050565b60006110a782610ed2565b6040015192915050565b6110ba8261166a565b8051600980546001600160a01b0319166001600160a01b039092169190911790556020810151600a556040810151606082015160808301516110fd9291906116b9565b610942600161173b565b6000808380602001905181019061111e91906123ea565b91509150600161112e6004610bff565b1180156111fb575060016111426004610bff565b61114c9190612418565b6000828152600860209081526040808320600e54600160801b90046001600160401b031684529091529020541015806111fb57506009546040516331a9108f60e11b8152600481018390526001600160a01b03858116921690636352211e90602401602060405180830381865afa1580156111cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111ef919061242b565b6001600160a01b031614155b156112195760405163075fd2b160e01b815260040160405180910390fd5b6000818152600860209081526040808320600e54600160801b90046001600160401b03168452909152812080549161125083612231565b90915550506001600160a01b03821660009081526003602052604090206002600382015460ff16600681111561128857611288611c89565b146112b15760405163f4a513b960e01b81526001600160a01b0384166004820152602401610a79565b6004810180549060006112c383612231565b9091555050600c80549060006112d883612231565b90915550506040805160018152600060208201526001600160a01b03868116828401529151918516917f463ffc2cf8b1596445c417388ed30e53eb67cf6668cb2be7f0addf8a78c8441b9181900360600190a25050505050565b600e54611351906001600160401b03600160401b820481169116612448565b6001600160401b031642116109b957604051634543ced160e11b815260040160405180910390fd5b60006113856004610bff565b9050600081116113d05760405162461bcd60e51b81526020600482015260166024820152754e4f5f524543495049454e545f544f5f52454d4f564560501b6044820152606401610a79565b6000600019815b8381101561141c5760006113ec600483611005565b905060006113f982610ed2565b9050838160600151101561141257806060015193508194505b50506001016113d7565b506001600160a01b03821661146c5760405162461bcd60e51b81526020600482015260166024820152754e4f5f524543495049454e545f544f5f52454d4f564560501b6044820152606401610a79565b6001600160a01b038216600090815260036020526040902061148f60048461162b565b5061149b600684611616565b506003818101805460ff19169091179055600b80549060006114bc8361224a565b91905055508060040154600c60008282546114d79190612418565b90915550506004810154604080516001600160a01b038616815260208101929092527fbe80a446a00b8794a7d05e8386915bdde937fe8b48da8d16175a5362b4c3f4f8910160405180910390a150505050565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeed196001600160a01b038416016115595761061f8282611782565b61061f83838361179e565b6001546040516329e40d4b60e01b815260048101919091526001600160a01b0382811660248301527f000000000000000000000000000000000000000000000000000000000000000016906329e40d4b90604401602060405180830381865afa1580156115d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115f99190612468565b61096d5760405163075fd2b160e01b815260040160405180910390fd5b6000611011836001600160a01b0384166117e4565b6000611011836001600160a01b038416611833565b600082600001828154811061165757611657611f01565b9060005260206000200154905092915050565b611672610970565b600154156116935760405163439a74c960e01b815260040160405180910390fd5b806000036116b457604051637fcce2a960e01b815260040160405180910390fd5b600155565b42836001600160401b031610806116d757506001600160401b038216155b806116e0575080155b156116fe57604051637fcce2a960e01b815260040160405180910390fd5b600e80546001600160401b03938416600160401b026fffffffffffffffffffffffffffffffff199091169390941692909217929092179055600d55565b6000805460ff19168215159081179091556040519081527fd94c9bc4d43c51d8dc345a016d8e3d994432fac68e72832e4cf3a616bd8efae09060200160405180910390a150565b60008060008084865af16109425763b12d13eb6000526004601cfd5b816014528060345263a9059cbb60601b60005260206000604460106000875af13d1560016000511417166117da576390b8ec186000526004601cfd5b6000603452505050565b600081815260018301602052604081205461182b5750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915561065c565b50600061065c565b6000818152600183016020526040812054801561191c576000611857600183612418565b855490915060009061186b90600190612418565b90508181146118d057600086600001828154811061188b5761188b611f01565b90600052602060002001549050808760000184815481106118ae576118ae611f01565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806118e1576118e161248a565b60019003818190600052602060002001600090559055856001016000868152602001908152602001600020600090556001935050505061065c565b600091505061065c565b6040518060a0016040528060006001600160a01b0316815260200161195e604051806040016040528060008152602001606081525090565b81526020016000815260200160008152602001600081525090565b634e487b7160e01b600052604160045260246000fd5b60405160c081016001600160401b03811182821017156119b1576119b1611979565b60405290565b604051601f8201601f191681016001600160401b03811182821017156119df576119df611979565b604052919050565b60006001600160401b03821115611a0057611a00611979565b5060051b60200190565b6001600160a01b038116811461096d57600080fd5b600082601f830112611a3057600080fd5b81356020611a45611a40836119e7565b6119b7565b82815260059290921b84018101918181019086841115611a6457600080fd5b8286015b84811015611a88578035611a7b81611a0a565b8352918301918301611a68565b509695505050505050565b60006001600160401b03821115611aac57611aac611979565b50601f01601f191660200190565b600082601f830112611acb57600080fd5b8135611ad9611a4082611a93565b818152846020838601011115611aee57600080fd5b816020850160208301376000918101602001919091529392505050565b600080600060608486031215611b2057600080fd5b83356001600160401b0380821115611b3757600080fd5b611b4387838801611a1f565b94506020860135915080821115611b5957600080fd5b50611b6686828701611aba565b9250506040840135611b7781611a0a565b809150509250925092565b60008060408385031215611b9557600080fd5b50508035926020909101359150565b60008060408385031215611bb757600080fd5b82356001600160401b03811115611bcd57600080fd5b611bd985828601611aba565b9250506020830135611bea81611a0a565b809150509250929050565b600060208284031215611c0757600080fd5b813561101181611a0a565b60005b83811015611c2d578181015183820152602001611c15565b50506000910152565b60008151808452611c4e816020860160208601611c12565b601f01601f19169290920160200192915050565b805182526000602082015160406020850152611c816040850182611c36565b949350505050565b634e487b7160e01b600052602160045260246000fd5b60078110611cbd57634e487b7160e01b600052602160045260246000fd5b9052565b602080825282516001600160a01b03168282015282015160a06040830152600090611cef60c0840182611c62565b90506040840151611d036060850182611c9f565b5060608401516080840152608084015160a08401528091505092915050565b600060208284031215611d3457600080fd5b5035919050565b60008060408385031215611d4e57600080fd5b82356001600160401b0380821115611d6557600080fd5b611d7186838701611a1f565b9350602091508185013581811115611d8857600080fd5b8501601f81018713611d9957600080fd5b8035611da7611a40826119e7565b81815260059190911b82018401908481019089831115611dc657600080fd5b8584015b83811015611dfe57803586811115611de25760008081fd5b611df08c8983890101611aba565b845250918601918601611dca565b508096505050505050509250929050565b602080825282518282018190526000919060409081850190868401855b82811015611e5a57815180516001600160a01b03168552860151868501529284019290850190600101611e2c565b5091979650505050505050565b6020810161065c8284611c9f565b6001600160a01b038616815260a060208201819052600090611e9990830187611c62565b9050611ea86040830186611c9f565b6060820193909352608001529392505050565b60008060408385031215611ece57600080fd5b8235915060208301356001600160401b03811115611eeb57600080fd5b611ef785828601611aba565b9150509250929050565b634e487b7160e01b600052603260045260246000fd5b600181811c90821680611f2b57607f821691505b602082108103611f4b57634e487b7160e01b600052602260045260246000fd5b50919050565b80516001600160401b0381168114611f6857600080fd5b919050565b600060a08284031215611f7f57600080fd5b60405160a081018181106001600160401b0382111715611fa157611fa1611979565b6040528251611faf81611a0a565b815260208381015190820152611fc760408401611f51565b6040820152611fd860608401611f51565b6060820152608083015160808201528091505092915050565b828152604060208201526000611c816040830184611c36565b634e487b7160e01b600052601160045260246000fd5b8082018082111561065c5761065c61200a565b60006040828403121561204557600080fd5b604051604081016001600160401b03828210818311171561206857612068611979565b8160405282935084518352602085015191508082111561208757600080fd5b508301601f8101851361209957600080fd5b80516120a7611a4082611a93565b8181528660208385010111156120bc57600080fd5b6120cd826020830160208601611c12565b8060208501525050505092915050565b6000602082840312156120ef57600080fd5b81516001600160401b038082111561210657600080fd5b9083019060c0828603121561211a57600080fd5b61212261198f565b82518152602083015161213481611a0a565b6020820152604083015161214781611a0a565b604082015260608301518281111561215e57600080fd5b61216a87828601612033565b6060830152506080830151608082015260a083015160a082015280935050505092915050565b60006001600160401b038083168181036121ac576121ac61200a565b6001019392505050565b600080600080608085870312156121cc57600080fd5b84516121d781611a0a565b60208601519094506121e881611a0a565b6040860151909350600781106121fd57600080fd5b60608601519092506001600160401b0381111561221957600080fd5b61222587828801612033565b91505092959194509250565b6000600182016122435761224361200a565b5060010190565b6000816122595761225961200a565b506000190190565b601f82111561061f57600081815260208120601f850160051c810160208610156122885750805b601f850160051c820191505b818110156122a757828155600101612294565b505050505050565b81516001600160401b038111156122c8576122c8611979565b6122dc816122d68454611f17565b84612261565b602080601f83116001811461231157600084156122f95750858301515b600019600386901b1c1916600185901b1785556122a7565b600085815260208120601f198616915b8281101561234057888601518255948401946001909101908401612321565b508582101561235e5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6040815260006123816040830185611c36565b905060018060a01b03831660208301529392505050565b6000602082840312156123aa57600080fd5b5051919050565b808202811582820484141761065c5761065c61200a565b6000826123e557634e487b7160e01b600052601260045260246000fd5b500490565b600080604083850312156123fd57600080fd5b825161240881611a0a565b6020939093015192949293505050565b8181038181111561065c5761065c61200a565b60006020828403121561243d57600080fd5b815161101181611a0a565b6001600160401b03818116838216019080821115610e5257610e5261200a565b60006020828403121561247a57600080fd5b8151801515811461101157600080fd5b634e487b7160e01b600052603160045260246000fdfea2646970667358221220f867319314d4bd78f25c3a16606f53ab523a692dd6d8f7e69758fff43371a60264736f6c63430008130033",
  "deployedBytecode": "0x6080604052600436106101d15760003560e01c806395355b3b116100f7578063df868ed311610095578063ef2920fc11610064578063ef2920fc14610594578063f199f56d146105a7578063f5b0dfb7146105bd578063f7cb789a146105dd57600080fd5b8063df868ed3146104fe578063eb11af9314610516578063eb82031214610543578063edd146cc1461057457600080fd5b8063a93d49fe116100d1578063a93d49fe1461047b578063b2b878d01461049b578063bcda201e146104c8578063dd4f8f74146104de57600080fd5b806395355b3b1461041d5780639fae179014610433578063a0cf0aea1461045357600080fd5b806342fda9c71161016f5780634e2786fb1161013e5780634e2786fb146103635780635c560f49146103a257806362812a39146103da57806363b51ac01461040757600080fd5b806342fda9c7146102cb57806347ccca02146102fe5780634ab4ba421461031e5780634d31d0871461033357600080fd5b80631db9ae5b116101ab5780631db9ae5b1461026e5780631e6dc9dc146102835780632bbe0cae146102a357806338fff2d0146102b657600080fd5b80630a6f0ee9146101dd5780630f0e1359146101ff57806315cc481e1461022757600080fd5b366101d857005b600080fd5b3480156101e957600080fd5b506101fd6101f8366004611b0b565b610604565b005b34801561020b57600080fd5b50610214610624565b6040519081526020015b60405180910390f35b34801561023357600080fd5b507f00000000000000000000000000000000000000000000000000000000000000005b6040516001600160a01b03909116815260200161021e565b34801561027a57600080fd5b50610214610635565b34801561028f57600080fd5b5061021461029e366004611b82565b610641565b6102566102b1366004611ba4565b610662565b3480156102c257600080fd5b50600154610214565b3480156102d757600080fd5b507f0000000000000000000000000000000000000000000000000000000000000000610214565b34801561030a57600080fd5b50600954610256906001600160a01b031681565b34801561032a57600080fd5b50600254610214565b34801561033f57600080fd5b5061035361034e366004611bf5565b610685565b604051901515815260200161021e565b34801561036f57600080fd5b50600e5461038a90600160801b90046001600160401b031681565b6040516001600160401b03909116815260200161021e565b3480156103ae57600080fd5b506102146103bd366004611b82565b600860209081526000928352604080842090915290825290205481565b3480156103e657600080fd5b506103fa6103f5366004611bf5565b610690565b60405161021e9190611cc1565b34801561041357600080fd5b50610214600c5481565b34801561042957600080fd5b50610214600b5481565b34801561043f57600080fd5b506103fa61044e366004611d22565b6106a1565b34801561045f57600080fd5b5061025673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee81565b34801561048757600080fd5b506103fa610496366004611d22565b6106bc565b3480156104a757600080fd5b506104bb6104b6366004611d3b565b6106d2565b60405161021e9190611e0f565b3480156104d457600080fd5b50610214600a5481565b3480156104ea57600080fd5b50600e5461038a906001600160401b031681565b34801561050a57600080fd5b5060005460ff16610353565b34801561052257600080fd5b50610536610531366004611bf5565b6107d0565b60405161021e9190611e67565b34801561054f57600080fd5b5061056361055e366004611bf5565b6107db565b60405161021e959493929190611e75565b34801561058057600080fd5b506101fd61058f366004611ebb565b6108c0565b6101fd6105a2366004611ba4565b610928565b3480156105b357600080fd5b50610214600d5481565b3480156105c957600080fd5b506101fd6105d8366004611d22565b610946565b3480156105e957600080fd5b50600e5461038a90600160401b90046001600160401b031681565b61060c610970565b6106146109bb565b61061f8383836109de565b505050565b60006106306006610bff565b905090565b60006106306004610bff565b60008281526008602090815260408083208484529091529020545b92915050565b600061066c610970565b6106746109bb565b61067e8383610c09565b905061065c565b600061065c82610e59565b610698611926565b61065c82610ed2565b6106a9611926565b61065c6106b7600484611005565b610ed2565b6106c4611926565b61065c6106b7600684611005565b815181516060919081146106f957604051633da4c02b60e11b815260040160405180910390fd5b6000816001600160401b0381111561071357610713611979565b60405190808252806020026020018201604052801561075857816020015b60408051808201909152600080825260208201528152602001906001900390816107315790505b50905060005b828110156107c7576107a286828151811061077b5761077b611f01565b602002602001015186838151811061079557610795611f01565b6020026020010151611018565b8282815181106107b4576107b4611f01565b602090810291909101015260010161075e565b50949350505050565b600061065c8261109c565b6003602090815260009182526040918290208054835180850190945260018201805485526002830180546001600160a01b0390931695939491929184019161082290611f17565b80601f016020809104026020016040519081016040528092919081815260200182805461084e90611f17565b801561089b5780601f106108705761010080835404028352916020019161089b565b820191906000526020600020905b81548152906001019060200180831161087e57829003601f168201915b5050509190925250505060038201546004830154600590930154919260ff9091169185565b6108c8610970565b6000818060200190518101906108de9190611f6d565b90506108ea83826110b1565b7f91efa3d50feccde0d0d202f8ae5c41ca0b2be614cebcb2bd2f4b019396e6568a838360405161091b929190611ff1565b60405180910390a1505050565b610930610970565b6109386109bb565b6109428282611107565b5050565b61094e610970565b80600260008282546109609190612020565b9091555061096d90508181565b50565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146109b95760405163075fd2b160e01b815260040160405180910390fd5b565b6001546000036109b957604051630f68fe6360e21b815260040160405180910390fd5b6109e6611332565b6109ee611379565b60006109fa6004610bff565b905060005b81811015610bb3576000610a14600483611005565b6001600160a01b03811660009081526003602090815260408083208151928301909152828252929350610a48908490611018565b60208101519091506000819003610a825760405163f4a513b960e01b81526001600160a01b03851660048201526024015b60405180910390fd5b60015460405163068bcd8d60e01b81526000916001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169163068bcd8d91610ad69160040190815260200190565b600060405180830381865afa158015610af3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610b1b91908101906120dd565b60408101518554919250610b38916001600160a01b03168461152a565b81846005016000828254610b4c9190612020565b90915550508354604080516001600160a01b039283168152602081018590528a8316818301529051918716917fb5b51454adfa840bd593658325a60a50b0216f12eb5d2937efe6cea935675b7d9181900360600190a25050600190930192506109ff915050565b50600e8054600160801b90046001600160401b0316906010610bd483612190565b91906101000a8154816001600160401b0302191690836001600160401b031602179055505050505050565b600061065c825490565b600081610c1581611564565b60008060008087806020019051810190610c2f91906121b6565b929650909450925090506001600160a01b0384161580610c5657506001600160a01b038316155b15610c7f5760405163f4a513b960e01b81526001600160a01b0385166004820152602401610a79565b6001600160a01b03841660009081526003602052604090206002600382015460ff166006811115610cb257610cb2611c89565b14158015610cd157506002836006811115610ccf57610ccf611c89565b145b15610cfd57600b8054906000610ce683612231565b90915550610cf79050600486611616565b50610d80565b6002600382015460ff166006811115610d1857610d18611c89565b148015610d3657506003836006811115610d3457610d34611c89565b145b15610d5c57600b8054906000610d4b8361224a565b90915550610cf7905060048661162b565b60405163f4a513b960e01b81526001600160a01b0386166004820152602401610a79565b600a54600b541115610da557604051631d28b78560e11b815260040160405180910390fd5b80546001600160a01b0319166001600160a01b03851617815581516001820190815560208301518391906002840190610dde90826122af565b50505060038101805484919060ff19166001836006811115610e0257610e02611c89565b0217905550846001600160a01b03167fa197306e3dd5494a61a695381aa809a53b8e377a685e84e404a85d5a8da6cc628a8a604051610e4292919061236e565b60405180910390a2509294505050505b5092915050565b6009546040516370a0823160e01b81526001600160a01b03838116600483015260009283929116906370a0823190602401602060405180830381865afa158015610ea7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ecb9190612398565b1192915050565b610eda611926565b6001600160a01b03808316600090815260036020908152604091829020825160a081018452815490941684528251808401909352600181018054845260028201805492948685019490939084019190610f3290611f17565b80601f0160208091040260200160405190810160405280929190818152602001828054610f5e90611f17565b8015610fab5780601f10610f8057610100808354040283529160200191610fab565b820191906000526020600020905b815481529060010190602001808311610f8e57829003601f168201915b505050919092525050508152600382015460209091019060ff166006811115610fd657610fd6611c89565b6006811115610fe757610fe7611c89565b81526004820154602082015260059091015460409091015292915050565b60006110118383611640565b9392505050565b60408051808201909152600080825260208201526001600160a01b03831660009081526003602052604081206004810154600c549192909161105b576000611076565b600c548260025461106c91906123b1565b61107691906123c8565b6040805180820190915293546001600160a01b0316845260208401525090949350505050565b60006110a782610ed2565b6040015192915050565b6110ba8261166a565b8051600980546001600160a01b0319166001600160a01b039092169190911790556020810151600a556040810151606082015160808301516110fd9291906116b9565b610942600161173b565b6000808380602001905181019061111e91906123ea565b91509150600161112e6004610bff565b1180156111fb575060016111426004610bff565b61114c9190612418565b6000828152600860209081526040808320600e54600160801b90046001600160401b031684529091529020541015806111fb57506009546040516331a9108f60e11b8152600481018390526001600160a01b03858116921690636352211e90602401602060405180830381865afa1580156111cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111ef919061242b565b6001600160a01b031614155b156112195760405163075fd2b160e01b815260040160405180910390fd5b6000818152600860209081526040808320600e54600160801b90046001600160401b03168452909152812080549161125083612231565b90915550506001600160a01b03821660009081526003602052604090206002600382015460ff16600681111561128857611288611c89565b146112b15760405163f4a513b960e01b81526001600160a01b0384166004820152602401610a79565b6004810180549060006112c383612231565b9091555050600c80549060006112d883612231565b90915550506040805160018152600060208201526001600160a01b03868116828401529151918516917f463ffc2cf8b1596445c417388ed30e53eb67cf6668cb2be7f0addf8a78c8441b9181900360600190a25050505050565b600e54611351906001600160401b03600160401b820481169116612448565b6001600160401b031642116109b957604051634543ced160e11b815260040160405180910390fd5b60006113856004610bff565b9050600081116113d05760405162461bcd60e51b81526020600482015260166024820152754e4f5f524543495049454e545f544f5f52454d4f564560501b6044820152606401610a79565b6000600019815b8381101561141c5760006113ec600483611005565b905060006113f982610ed2565b9050838160600151101561141257806060015193508194505b50506001016113d7565b506001600160a01b03821661146c5760405162461bcd60e51b81526020600482015260166024820152754e4f5f524543495049454e545f544f5f52454d4f564560501b6044820152606401610a79565b6001600160a01b038216600090815260036020526040902061148f60048461162b565b5061149b600684611616565b506003818101805460ff19169091179055600b80549060006114bc8361224a565b91905055508060040154600c60008282546114d79190612418565b90915550506004810154604080516001600160a01b038616815260208101929092527fbe80a446a00b8794a7d05e8386915bdde937fe8b48da8d16175a5362b4c3f4f8910160405180910390a150505050565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeed196001600160a01b038416016115595761061f8282611782565b61061f83838361179e565b6001546040516329e40d4b60e01b815260048101919091526001600160a01b0382811660248301527f000000000000000000000000000000000000000000000000000000000000000016906329e40d4b90604401602060405180830381865afa1580156115d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115f99190612468565b61096d5760405163075fd2b160e01b815260040160405180910390fd5b6000611011836001600160a01b0384166117e4565b6000611011836001600160a01b038416611833565b600082600001828154811061165757611657611f01565b9060005260206000200154905092915050565b611672610970565b600154156116935760405163439a74c960e01b815260040160405180910390fd5b806000036116b457604051637fcce2a960e01b815260040160405180910390fd5b600155565b42836001600160401b031610806116d757506001600160401b038216155b806116e0575080155b156116fe57604051637fcce2a960e01b815260040160405180910390fd5b600e80546001600160401b03938416600160401b026fffffffffffffffffffffffffffffffff199091169390941692909217929092179055600d55565b6000805460ff19168215159081179091556040519081527fd94c9bc4d43c51d8dc345a016d8e3d994432fac68e72832e4cf3a616bd8efae09060200160405180910390a150565b60008060008084865af16109425763b12d13eb6000526004601cfd5b816014528060345263a9059cbb60601b60005260206000604460106000875af13d1560016000511417166117da576390b8ec186000526004601cfd5b6000603452505050565b600081815260018301602052604081205461182b5750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915561065c565b50600061065c565b6000818152600183016020526040812054801561191c576000611857600183612418565b855490915060009061186b90600190612418565b90508181146118d057600086600001828154811061188b5761188b611f01565b90600052602060002001549050808760000184815481106118ae576118ae611f01565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806118e1576118e161248a565b60019003818190600052602060002001600090559055856001016000868152602001908152602001600020600090556001935050505061065c565b600091505061065c565b6040518060a0016040528060006001600160a01b0316815260200161195e604051806040016040528060008152602001606081525090565b81526020016000815260200160008152602001600081525090565b634e487b7160e01b600052604160045260246000fd5b60405160c081016001600160401b03811182821017156119b1576119b1611979565b60405290565b604051601f8201601f191681016001600160401b03811182821017156119df576119df611979565b604052919050565b60006001600160401b03821115611a0057611a00611979565b5060051b60200190565b6001600160a01b038116811461096d57600080fd5b600082601f830112611a3057600080fd5b81356020611a45611a40836119e7565b6119b7565b82815260059290921b84018101918181019086841115611a6457600080fd5b8286015b84811015611a88578035611a7b81611a0a565b8352918301918301611a68565b509695505050505050565b60006001600160401b03821115611aac57611aac611979565b50601f01601f191660200190565b600082601f830112611acb57600080fd5b8135611ad9611a4082611a93565b818152846020838601011115611aee57600080fd5b816020850160208301376000918101602001919091529392505050565b600080600060608486031215611b2057600080fd5b83356001600160401b0380821115611b3757600080fd5b611b4387838801611a1f565b94506020860135915080821115611b5957600080fd5b50611b6686828701611aba565b9250506040840135611b7781611a0a565b809150509250925092565b60008060408385031215611b9557600080fd5b50508035926020909101359150565b60008060408385031215611bb757600080fd5b82356001600160401b03811115611bcd57600080fd5b611bd985828601611aba565b9250506020830135611bea81611a0a565b809150509250929050565b600060208284031215611c0757600080fd5b813561101181611a0a565b60005b83811015611c2d578181015183820152602001611c15565b50506000910152565b60008151808452611c4e816020860160208601611c12565b601f01601f19169290920160200192915050565b805182526000602082015160406020850152611c816040850182611c36565b949350505050565b634e487b7160e01b600052602160045260246000fd5b60078110611cbd57634e487b7160e01b600052602160045260246000fd5b9052565b602080825282516001600160a01b03168282015282015160a06040830152600090611cef60c0840182611c62565b90506040840151611d036060850182611c9f565b5060608401516080840152608084015160a08401528091505092915050565b600060208284031215611d3457600080fd5b5035919050565b60008060408385031215611d4e57600080fd5b82356001600160401b0380821115611d6557600080fd5b611d7186838701611a1f565b9350602091508185013581811115611d8857600080fd5b8501601f81018713611d9957600080fd5b8035611da7611a40826119e7565b81815260059190911b82018401908481019089831115611dc657600080fd5b8584015b83811015611dfe57803586811115611de25760008081fd5b611df08c8983890101611aba565b845250918601918601611dca565b508096505050505050509250929050565b602080825282518282018190526000919060409081850190868401855b82811015611e5a57815180516001600160a01b03168552860151868501529284019290850190600101611e2c565b5091979650505050505050565b6020810161065c8284611c9f565b6001600160a01b038616815260a060208201819052600090611e9990830187611c62565b9050611ea86040830186611c9f565b6060820193909352608001529392505050565b60008060408385031215611ece57600080fd5b8235915060208301356001600160401b03811115611eeb57600080fd5b611ef785828601611aba565b9150509250929050565b634e487b7160e01b600052603260045260246000fd5b600181811c90821680611f2b57607f821691505b602082108103611f4b57634e487b7160e01b600052602260045260246000fd5b50919050565b80516001600160401b0381168114611f6857600080fd5b919050565b600060a08284031215611f7f57600080fd5b60405160a081018181106001600160401b0382111715611fa157611fa1611979565b6040528251611faf81611a0a565b815260208381015190820152611fc760408401611f51565b6040820152611fd860608401611f51565b6060820152608083015160808201528091505092915050565b828152604060208201526000611c816040830184611c36565b634e487b7160e01b600052601160045260246000fd5b8082018082111561065c5761065c61200a565b60006040828403121561204557600080fd5b604051604081016001600160401b03828210818311171561206857612068611979565b8160405282935084518352602085015191508082111561208757600080fd5b508301601f8101851361209957600080fd5b80516120a7611a4082611a93565b8181528660208385010111156120bc57600080fd5b6120cd826020830160208601611c12565b8060208501525050505092915050565b6000602082840312156120ef57600080fd5b81516001600160401b038082111561210657600080fd5b9083019060c0828603121561211a57600080fd5b61212261198f565b82518152602083015161213481611a0a565b6020820152604083015161214781611a0a565b604082015260608301518281111561215e57600080fd5b61216a87828601612033565b6060830152506080830151608082015260a083015160a082015280935050505092915050565b60006001600160401b038083168181036121ac576121ac61200a565b6001019392505050565b600080600080608085870312156121cc57600080fd5b84516121d781611a0a565b60208601519094506121e881611a0a565b6040860151909350600781106121fd57600080fd5b60608601519092506001600160401b0381111561221957600080fd5b61222587828801612033565b91505092959194509250565b6000600182016122435761224361200a565b5060010190565b6000816122595761225961200a565b506000190190565b601f82111561061f57600081815260208120601f850160051c810160208610156122885750805b601f850160051c820191505b818110156122a757828155600101612294565b505050505050565b81516001600160401b038111156122c8576122c8611979565b6122dc816122d68454611f17565b84612261565b602080601f83116001811461231157600084156122f95750858301515b600019600386901b1c1916600185901b1785556122a7565b600085815260208120601f198616915b8281101561234057888601518255948401946001909101908401612321565b508582101561235e5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6040815260006123816040830185611c36565b905060018060a01b03831660208301529392505050565b6000602082840312156123aa57600080fd5b5051919050565b808202811582820484141761065c5761065c61200a565b6000826123e557634e487b7160e01b600052601260045260246000fd5b500490565b600080604083850312156123fd57600080fd5b825161240881611a0a565b6020939093015192949293505050565b8181038181111561065c5761065c61200a565b60006020828403121561243d57600080fd5b815161101181611a0a565b6001600160401b03818116838216019080821115610e5257610e5261200a565b60006020828403121561247a57600080fd5b8151801515811461101157600080fd5b634e487b7160e01b600052603160045260246000fdfea2646970667358221220f867319314d4bd78f25c3a16606f53ab523a692dd6d8f7e69758fff43371a60264736f6c63430008130033",
  "devdoc": {
    "author": "allo-team",
    "errors": {
      "ANCHOR_ERROR()": [
        {
          "details": "Thrown if the anchor creation fails"
        }
      ],
      "NONCE_NOT_AVAILABLE()": [
        {
          "details": "Thrown when the nonce passed has been used or not available"
        }
      ],
      "NOT_PENDING_OWNER()": [
        {
          "details": "Thrown when the 'msg.sender' is not the pending owner on ownership transfer"
        }
      ]
    },
    "events": {
      "Allocated(address,uint256,address,address)": {
        "params": {
          "amount": "The amount allocated",
          "recipientId": "The ID of the recipient",
          "token": "The token allocated"
        }
      },
      "Distributed(address,address,uint256,address)": {
        "params": {
          "amount": "The amount distributed",
          "recipientAddress": "The recipient",
          "recipientId": "The ID of the recipient",
          "sender": "The sender"
        }
      },
      "Initialized(uint256,bytes)": {
        "params": {
          "data": "The data passed to the 'initialize' function",
          "poolId": "The ID of the pool"
        }
      },
      "PoolActive(bool)": {
        "params": {
          "active": "The status of the pool"
        }
      },
      "Registered(address,bytes,address)": {
        "params": {
          "data": "The data passed to the 'registerRecipient' function",
          "recipientId": "The ID of the recipient",
          "sender": "The sender"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "allocate(bytes,address)": {
        "details": "The encoded '_data' will be determined by the strategy implementation. Only 'Allo' contract can      call this when it is initialized.",
        "params": {
          "_data": "The data to use to allocate to the recipient",
          "_sender": "The address of the sender"
        }
      },
      "distribute(address[],bytes,address)": {
        "details": "The encoded '_data' will be determined by the strategy implementation. Only 'Allo' contract can      call this when it is initialized.",
        "params": {
          "_data": "The data to use to distribute to the recipients",
          "_recipientIds": "The IDs of the recipients",
          "_sender": "The address of the sender"
        }
      },
      "getActiveRecipient(uint256)": {
        "params": {
          "_index": "The index of the recipient"
        }
      },
      "getActiveRecipientCount()": {
        "returns": {
          "_0": "The total number of recipients"
        }
      },
      "getAllo()": {
        "returns": {
          "_0": "The Allo contract"
        }
      },
      "getAllocationsMade(uint256,uint256)": {
        "params": {
          "_nftId": "The nft id",
          "_roundNumber": "The round number"
        },
        "returns": {
          "_0": "The number of votes"
        }
      },
      "getInactiveRecipientCount()": {
        "returns": {
          "_0": "The total number of recipients"
        }
      },
      "getPayouts(address[],bytes[])": {
        "details": "The encoded '_data' will be determined by the strategy implementation.",
        "params": {
          "_data": "The data to use to get the payout summary for the recipients",
          "_recipientIds": "The IDs of the recipients"
        },
        "returns": {
          "_0": "The payout summary for the recipients"
        }
      },
      "getPoolAmount()": {
        "returns": {
          "_0": "The balance of the pool"
        }
      },
      "getPoolId()": {
        "returns": {
          "_0": "The ID of the pool"
        }
      },
      "getRecipient(address)": {
        "params": {
          "_recipientId": "Id of the recipient"
        }
      },
      "getRecipientStatus(address)": {
        "params": {
          "_recipientId": "The ID of the recipient"
        },
        "returns": {
          "_0": "The status of the recipient"
        }
      },
      "getStrategyId()": {
        "returns": {
          "_0": "The ID of the strategy"
        }
      },
      "increasePoolAmount(uint256)": {
        "details": "Increases the 'poolAmount' by '_amount'. Only 'Allo' contract can call this.",
        "params": {
          "_amount": "The amount to increase the pool by"
        }
      },
      "isPoolActive()": {
        "returns": {
          "_0": "'true' if the pool is active, otherwise 'false'"
        }
      },
      "isValidAllocator(address)": {
        "details": "How the allocator is determined is up to the strategy implementation.",
        "params": {
          "_allocator": "The address to check if it is a valid allocator for the strategy."
        },
        "returns": {
          "_0": "'true' if the address is a valid allocator, 'false' otherwise"
        }
      },
      "registerRecipient(bytes,address)": {
        "details": "Registers a recipient and returns the ID of the recipient. The encoded '_data' will be determined by the      strategy implementation. Only 'Allo' contract can call this when it is initialized.",
        "params": {
          "_data": "The data to use to register the recipient",
          "_sender": "The address of the sender"
        },
        "returns": {
          "recipientId": "The recipientId"
        }
      }
    },
    "title": "Proportional Payout Strategy",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "ALLOCATION_ACTIVE()": [
        {
          "notice": "Thrown when the allocation is active."
        }
      ],
      "ALLOCATION_NOT_ACTIVE()": [
        {
          "notice": "Thrown when the allocation is not active."
        }
      ],
      "ALLOCATION_NOT_ENDED()": [
        {
          "notice": "Thrown when the allocation is not ended."
        }
      ],
      "ALREADY_INITIALIZED()": [
        {
          "notice": "Thrown when data is already intialized"
        }
      ],
      "AMOUNT_MISMATCH()": [
        {
          "notice": "Thrown when the amount of tokens sent does not match the amount of tokens expected"
        }
      ],
      "ARRAY_MISMATCH()": [
        {
          "notice": "Thrown when two arrays length are not equal"
        }
      ],
      "INVALID()": [
        {
          "notice": "Thrown as a general error when input / data is invalid"
        }
      ],
      "INVALID_ADDRESS()": [
        {
          "notice": "Thrown when an invalid address is used"
        }
      ],
      "INVALID_FEE()": [
        {
          "notice": "Thrown when the fee is below 1e18 which is the fee percentage denominator"
        }
      ],
      "INVALID_METADATA()": [
        {
          "notice": "Thrown when the metadata is invalid."
        }
      ],
      "INVALID_REGISTRATION()": [
        {
          "notice": "Thrown when the registration is invalid."
        }
      ],
      "IS_APPROVED_STRATEGY()": [
        {
          "notice": "Thrown when the strategy is approved and should be cloned"
        }
      ],
      "MAX_REACHED()": [
        {
          "notice": "===================== ======= Errors ====== ====================="
        }
      ],
      "MISMATCH()": [
        {
          "notice": "Thrown when mismatch in decoding data"
        }
      ],
      "NOT_APPROVED_STRATEGY()": [
        {
          "notice": "Thrown when the strategy is not approved"
        }
      ],
      "NOT_ENOUGH_FUNDS()": [
        {
          "notice": "Thrown when not enough funds are available"
        }
      ],
      "NOT_IMPLEMENTED()": [
        {
          "notice": "Thrown when the function is not implemented"
        }
      ],
      "NOT_INITIALIZED()": [
        {
          "notice": "Thrown when data is yet to be initialized"
        }
      ],
      "POOL_ACTIVE()": [
        {
          "notice": "Thrown when a pool is already active"
        }
      ],
      "POOL_INACTIVE()": [
        {
          "notice": "Thrown when a pool is inactive"
        }
      ],
      "RECIPIENT_ALREADY_ACCEPTED()": [
        {
          "notice": "Thrown when recipient is already accepted."
        }
      ],
      "RECIPIENT_ERROR(address)": [
        {
          "notice": "Thrown when there is an error in recipient."
        }
      ],
      "RECIPIENT_NOT_ACCEPTED()": [
        {
          "notice": "Thrown when the recipient is not accepted."
        }
      ],
      "REGISTRATION_ACTIVE()": [
        {
          "notice": "Thrown when registration is active."
        }
      ],
      "REGISTRATION_NOT_ACTIVE()": [
        {
          "notice": "Thrown when registration is not active."
        }
      ],
      "UNAUTHORIZED()": [
        {
          "notice": "Thrown when user is not authorized"
        }
      ],
      "ZERO_ADDRESS()": [
        {
          "notice": "Thrown when address is the zero address"
        }
      ]
    },
    "events": {
      "Allocated(address,uint256,address,address)": {
        "notice": "Emitted when a recipient is allocated to."
      },
      "AllocationTimeSet(uint256,uint256)": {
        "notice": "===================== ======= Events ====== ====================="
      },
      "Distributed(address,address,uint256,address)": {
        "notice": "Emitted when tokens are distributed."
      },
      "Initialized(uint256,bytes)": {
        "notice": "Emitted when strategy is initialized."
      },
      "PoolActive(bool)": {
        "notice": "Emitted when pool is set to active status."
      },
      "Registered(address,bytes,address)": {
        "notice": "Emitted when a recipient is registered."
      }
    },
    "kind": "user",
    "methods": {
      "NATIVE()": {
        "notice": "Address of the native token"
      },
      "allocate(bytes,address)": {
        "notice": "Allocates to a recipient."
      },
      "allocationsMade(uint256,uint256)": {
        "notice": "nftId => roundNumber => allocations made"
      },
      "distribute(address[],bytes,address)": {
        "notice": "Distributes funds (tokens) to recipients."
      },
      "getActiveRecipient(uint256)": {
        "notice": "Get the recipient by their index in the active recipients list"
      },
      "getActiveRecipientCount()": {
        "notice": "Get the total number of active recipients"
      },
      "getAllo()": {
        "notice": "Getter for the 'Allo' contract."
      },
      "getAllocationsMade(uint256,uint256)": {
        "notice": "Get the allocators votes for a round"
      },
      "getInactiveRecipientCount()": {
        "notice": "Get the total number of inactive recipients"
      },
      "getPayouts(address[],bytes[])": {
        "notice": "Gets the payout summary for recipients."
      },
      "getPoolAmount()": {
        "notice": "Getter for the 'poolAmount'."
      },
      "getPoolId()": {
        "notice": "Getter for the 'poolId'."
      },
      "getRecipient(address)": {
        "notice": "Get the recipient"
      },
      "getRecipientStatus(address)": {
        "notice": "Getter for the status of a recipient."
      },
      "getStrategyId()": {
        "notice": "Getter for the 'strategyId'."
      },
      "increasePoolAmount(uint256)": {
        "notice": "Increases the pool amount."
      },
      "initialize(uint256,bytes)": {
        "notice": "=============================== ========= Initialize ========== ==============================="
      },
      "isPoolActive()": {
        "notice": "Getter for whether or not the pool is active."
      },
      "isValidAllocator(address)": {
        "notice": "Checks if the '_allocator' is a valid allocator."
      },
      "maxRecipientsAllowed()": {
        "notice": "The maximum approved recipients"
      },
      "nft()": {
        "notice": "The NFT to give allocators"
      },
      "recipients(address)": {
        "notice": "recipientId => Recipient"
      },
      "recipientsCounter()": {
        "notice": "The total number of recipients"
      },
      "registerRecipient(bytes,address)": {
        "notice": "Registers a recipient."
      },
      "roundDuration()": {
        "notice": "The duration of each allocation round"
      },
      "roundNumber()": {
        "notice": "The current round number (0 == first round)"
      },
      "roundReward()": {
        "notice": "The reward for the round"
      },
      "roundStartTime()": {
        "notice": "The start time of the first allocation round"
      },
      "totalAllocations()": {
        "notice": "The total number of votes cast by allocators"
      }
    },
    "notice": "This strategy allows the allocator to allocate votes to recipients",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4160,
        "contract": "contracts/SurvivorStrategy.sol:SurvivorStrategy",
        "label": "poolActive",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 4162,
        "contract": "contracts/SurvivorStrategy.sol:SurvivorStrategy",
        "label": "poolId",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 4164,
        "contract": "contracts/SurvivorStrategy.sol:SurvivorStrategy",
        "label": "poolAmount",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 4832,
        "contract": "contracts/SurvivorStrategy.sol:SurvivorStrategy",
        "label": "recipients",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_struct(Recipient)4810_storage)"
      },
      {
        "astId": 4836,
        "contract": "contracts/SurvivorStrategy.sol:SurvivorStrategy",
        "label": "activeRecipients",
        "offset": 0,
        "slot": "4",
        "type": "t_struct(AddressSet)2859_storage"
      },
      {
        "astId": 4840,
        "contract": "contracts/SurvivorStrategy.sol:SurvivorStrategy",
        "label": "inactiveRecipients",
        "offset": 0,
        "slot": "6",
        "type": "t_struct(AddressSet)2859_storage"
      },
      {
        "astId": 4847,
        "contract": "contracts/SurvivorStrategy.sol:SurvivorStrategy",
        "label": "allocationsMade",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 4851,
        "contract": "contracts/SurvivorStrategy.sol:SurvivorStrategy",
        "label": "nft",
        "offset": 0,
        "slot": "9",
        "type": "t_contract(ERC721)944"
      },
      {
        "astId": 4854,
        "contract": "contracts/SurvivorStrategy.sol:SurvivorStrategy",
        "label": "maxRecipientsAllowed",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 4857,
        "contract": "contracts/SurvivorStrategy.sol:SurvivorStrategy",
        "label": "recipientsCounter",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 4860,
        "contract": "contracts/SurvivorStrategy.sol:SurvivorStrategy",
        "label": "totalAllocations",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 4863,
        "contract": "contracts/SurvivorStrategy.sol:SurvivorStrategy",
        "label": "roundReward",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 4866,
        "contract": "contracts/SurvivorStrategy.sol:SurvivorStrategy",
        "label": "roundStartTime",
        "offset": 0,
        "slot": "14",
        "type": "t_uint64"
      },
      {
        "astId": 4869,
        "contract": "contracts/SurvivorStrategy.sol:SurvivorStrategy",
        "label": "roundDuration",
        "offset": 8,
        "slot": "14",
        "type": "t_uint64"
      },
      {
        "astId": 4872,
        "contract": "contracts/SurvivorStrategy.sol:SurvivorStrategy",
        "label": "roundNumber",
        "offset": 16,
        "slot": "14",
        "type": "t_uint64"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ERC721)944": {
        "encoding": "inplace",
        "label": "contract ERC721",
        "numberOfBytes": "20"
      },
      "t_enum(Status)5842": {
        "encoding": "inplace",
        "label": "enum IStrategy.Status",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_struct(Recipient)4810_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct SurvivorStrategy.Recipient)",
        "numberOfBytes": "32",
        "value": "t_struct(Recipient)4810_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AddressSet)2859_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 2858,
            "contract": "contracts/SurvivorStrategy.sol:SurvivorStrategy",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)2544_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Metadata)6621_storage": {
        "encoding": "inplace",
        "label": "struct Metadata",
        "members": [
          {
            "astId": 6617,
            "contract": "contracts/SurvivorStrategy.sol:SurvivorStrategy",
            "label": "protocol",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 6620,
            "contract": "contracts/SurvivorStrategy.sol:SurvivorStrategy",
            "label": "pointer",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Recipient)4810_storage": {
        "encoding": "inplace",
        "label": "struct SurvivorStrategy.Recipient",
        "members": [
          {
            "astId": 4797,
            "contract": "contracts/SurvivorStrategy.sol:SurvivorStrategy",
            "label": "recipientAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 4800,
            "contract": "contracts/SurvivorStrategy.sol:SurvivorStrategy",
            "label": "metadata",
            "offset": 0,
            "slot": "1",
            "type": "t_struct(Metadata)6621_storage"
          },
          {
            "astId": 4803,
            "contract": "contracts/SurvivorStrategy.sol:SurvivorStrategy",
            "label": "recipientStatus",
            "offset": 0,
            "slot": "3",
            "type": "t_enum(Status)5842"
          },
          {
            "astId": 4806,
            "contract": "contracts/SurvivorStrategy.sol:SurvivorStrategy",
            "label": "totalVotesReceived",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 4809,
            "contract": "contracts/SurvivorStrategy.sol:SurvivorStrategy",
            "label": "earned",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(Set)2544_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 2539,
            "contract": "contracts/SurvivorStrategy.sol:SurvivorStrategy",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 2543,
            "contract": "contracts/SurvivorStrategy.sol:SurvivorStrategy",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}